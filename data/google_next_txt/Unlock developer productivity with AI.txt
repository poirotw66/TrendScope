 Hi, my name is Niranjan Tulpule and I'm a senior director at Google. Today I'm going to talk to you about how we are improving developer productivity inside Google using the power of AI. Developers at Google who use AI the most, that is the top quartile of developers, see massive productivity benefits through the use of AI. They commit more than 13% more changes. If you take those same developers and if you study them in a controlled environment, we notice that their coding velocity is about 21% faster. But it's not just about productivity or velocity. How do people feel about use of AI? Well, we run quarterly surveys across all of engineering at Google and we find that about three out of four engineers at Google report that AI has positively impacted their productivity. I want to talk to you about some of the lessons that we've learned, but more importantly, share a few paradigm shifts that we are observing. Today, we are actively enhancing software development by meeting users where they are and applying AI capabilities. But where we actually need to go as an industry is towards transforming software development. That means harnessing the power of AI through agentic technologies, through better reasoning capabilities, through better multimodal capabilities that we get from these models. Eventually, we want to go to a place of software abundance. We call that as a democratized paradigm of software development. But today, let's just stick to transformation. Now, let's look at a couple of examples of what this transformation could look like. We are already witnessing a new paradigm for software development, something that you might have heard called as vibe coding. What does that mean really? Users interact with their IDEs and other coding surfaces using natural language prompts. And they use that to learn unfamiliar code bases and learn new technologies and get their tasks done quickly. Features and modalities like chat allow for quick explanation of code bases and a Q&A interface so that engineers can find and navigate their way through tasks faster. With the arrival of agentic AI capabilities, engineers can start delegating tasks to AI where AI automates complex workflows on behalf of engineers with minimal amount of developer engagement. AI is also an important tool to reduce technical debt. AI is also an important tool to reduce technical debt. When we do surveys, we find that more than 80% of engineers report that at some point they were hindered by one kind of technical debt or another. Our studies further indicate that between 20 to 50% of a typical team's time is spent on dealing with technical debt. AI has been incredibly helpful in terms of improving code quality and testing. We are using AI to fix bugs and other forms of technical debt. AI has been very helpful in terms of the data. So what lessons can we learn through these paradigm shifts that we are experiencing right now? Most importantly, let's acknowledge that new paradigm for software development are here now and we need to embrace them. Investing in user experience is critical so that we can balance between low friction inflow changes and high impact disruptive changes as needed. By carefully combining assistive and agentic AI technologies, we can solve fairly hard software orchestration and deployment challenges. And finally, we need to invest in change management and we need to invest in developer education so that we can truly roll out these capabilities at scale. That's all I have for you today. Thank you so much.