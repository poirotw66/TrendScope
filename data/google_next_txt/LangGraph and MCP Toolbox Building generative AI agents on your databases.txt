 ANDREW BROOKS Hi, I'm Andrew Brooke. I lead a team here at Google Cloud that works at the intersection of generative AI, application development, and cloud databases. In case you missed the full talk with Harrison, Curtis, and myself, I'm going to give you a quick recap here. There's an exciting new technology stack that enables developers to automate complex real-world workflows with agents. But first, what are agents? Agents are software applications that use generative AI models to make decisions. They gather data and take actions by selecting tools. These tools can be API calls or database queries or any other function that the agent has been given access to. Systems built with agents can be thought of on a spectrum of flexibility and reliability. On one end, a chain is very deterministic. The developer defines the flow of control ahead of time as a sequence of steps. An agent is more autonomous. The agent can make some decisions. In the most extreme case, we can build a system like the React loop in which the agent can call tools indefinitely. This is extremely flexible, but it is hard to make reliable. While the simple sequential chain is more reliable, but it's not flexible at all. How do we achieve both? The answer is with graphs. LangGraph provides the perfect middle ground in which the developer defines a graph of states which the LLM can transition between, selecting from different tools at each state. This provides a nice balance of flexibility and control, enabling the development of practical, agentic applications that can solve real-world problems. LangGraph provides the framework for orchestrating an agent. In addition to defining the graph for the agent, it supports human-in-the-loop interactions, persistence, and streaming. LangSmith is a managed service for deploying LangGraph agents with enhanced observability and testing to support real-world applications. But in addition to enabling powerful and flexible automation, generative AI-powered agents can introduce new issues. It's very difficult to predict with 100% certainty how an AI agent will respond to a human user, especially one who is malicious. In this simple example, a malicious user named Eve is tricking a customer service agent into telling her what her friend Bob ordered. The agent isn't supposed to give out information for other users, but Eve tricks it into believing that she is Bob. So the agent dutifully invokes the order lookup tool to find recent orders from Bob and discloses Bob's personal order history to Eve. Uh-oh. Instead of relying on the AI to make the right decision 100% of the time, we instead use a new proxy component to move the most critical information, such as the identity of the user, out of the AI's control and instead have it follow a deterministic path. For example, we change the recent orders tool to only allow the agent to set the date range, not the user ID. The framework that manages the agent now asks Eve to sign in with an auth provider, such as Google, and then passes the token, which includes the cryptographically signed identity of the user, along with the tool call, to a proxy sitting between the agent and the database. That proxy validates the user's identity and then constructs the database query using that identity. In this way, the critical part of the query from an access control perspective is handled by robust deterministic methods that are independent of the AI. The AI can still be confused, but it can't access data to which the end user is not entitled. That proxy that I referred to on the previous slide is our recently launched MCP toolbox for databases. This is a Google-developed, open-source server that makes it easy to connect agents running in frameworks like Google's Agent Development Kit, LangGraph, or LamaIndex with tools that query databases. It simplifies development, improves observability, and makes it easy to integrate auth services to address data access concerns like what I just showed. And best of all, Toolbox now supports model context protocol, which means it can be used by any agent that is compatible with MCP. And did I mention that it was easy to use? This is the definition of a tool which queries a database to look up an airline flight. Just a simple description, SQL query, and arguments. That's all. And this is the code to integrate that tool into a LangChain or LangGraph application. It's really that easy. And of course, it's just as easy to integrate with MCP. So in summary, agents are poised to transform your business by automating critical workflows. Those agents will need access to data, and much of that data resides in databases. So you need to connect your agents with your databases. And that is possible today with a combination of LangGraph, MCP Toolbox for Databases, and the portfolio of AI-ready databases from Google Cloud. Thank you so much for watching. Thank you so much for watching.