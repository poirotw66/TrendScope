 Sam Sharaf So a bit of introduction. My name is Sam Sharaf. I am a product lead with Salesforce Agent Force team. And joining me is Daryl. Hi, everyone. Nice to meet you. My name is Daryl Martis. I'm a director of product for AI at Salesforce. Thank you, Daryl. And later we'll have two Googlers join us for Q&A, Michael and Todd. So let's go through the agenda really quick. We'll start off with Agent Force, Salesforce Agent Force. How many of you are aware of Agent Force? Oh, wow. More than what I expected because it's a Google event. So that's great. There is, seems like more than half the people are aware. We'll quickly pivot to multi-agents. So when we say human and AI agents together, multi-agents play a key theme in that paradigm. But for multi-agents to be successful, it's important to have agent interoperability, how agents can communicate and talk to each other. And that's one of the key themes and topics. And then we'll finish it off with how Salesforce and Google is driving innovation in this area. How many of you heard about A2A announcement yesterday? Oh, it's a fewer than I expected. Okay. So then you're at the right place because we'll cover that. So with Salesforce, and since this is extra forward-looking, we are going to talk about stuff which is not sharing the product. So this is basically a disclaimer slide, which talks about make your buying decisions based on your due diligence and not what's in the session. Though in the session, what we have is pretty good. All right. So I'm going to hand it off to Daryl, who is going to give you a quick 101 session on agent force. All right. Thank you very much, Sam. So let's talk about why we're here. There are two main problems here. There's a dichotomy of problems from both sides for customers, for our customers. Number one is that their workforces are overwhelmed. They're doing a lot of low-value tasks. They're stalled productivity. And they've only got fixed capacity in terms of employees, in terms of what they can do. That's not scalable. And on the other side, their customers, our customers' customers expect more. They, for example, expect zero-hold cues, zero-hold time with cues when they, let's say, have conversations with customer service. They expect more personalized experiences. And they also expect empathetic conversations. So what we found in our surveys is that 41% of time is lost with low-value tasks. So how do we improve on that? How do we make that better for our customers? This is why we've introduced our digital labor platform called Agent Force. Agent Force lives on top of our existing Salesforce platform, on top of Data Cloud, on top of Customer 360, all of the tools that you know and love. It allows you to build autonomous agents with pre-built skills for any role and industry. So it's our next-generation layer. It enables these autonomous agents to take action anywhere with Flow, Apex, any of the other tools and APIs that you know and love and used for many years. And you can connect these agents to any of your enterprise data without training on it. So using RAG, for example, you'll be able to access contextual data about your customers and give more personalized experiences to them. And a lot of this is built on top of our Atlas reasoning engine. Our Atlas reasoning engine was created by our research team, and it incorporates that as part of its reasoning. Now, there are five attributes to this agent, to an autonomous agent. Number one is the role. You tell the agent the certain topic that it can work on. You give it certain instructions and say, these are the things that you can work on. You give it concise and clear instructions in natural language. For example, in English, you tell it what its role is. Then you give it access to data. You tell it what data it can have access to, whether it be data in Salesforce, in any of the clouds, whether it be data cloud or anywhere else. So it has more context about customers. You can also tell it what capabilities it has or what actions it can do, whether it be order management, whether it be lookup, for example. And the guardrails, that's important as well. It needs to know what it cannot do. So you can tell it explicitly. You can do X, Y, Z. You cannot do A, B, C. And as well, you tell it where it can work, the channels it can work at. So whether it be in email, whether it be in a chat bot, whether it be via SMS, you tell it what channels it can work in. And, of course, all of this is built on top of our trust layer, our Einstein trust layer, which we introduced a Dreamforce, two Dreamforces ago, actually. So it's been quite a great journey from there. And, of course, all of this is inbuilt with our trust layer. All right, so Agentforce isn't just co-pilot. It's our new wave of AI. We've had chat bots before. They've got fixed rules and rule sets and repetitive tasks. They're great for that. And then we had co-pilots, which were smart, tailored assistant, but couldn't do more. They weren't autonomous. They couldn't get personalized experiences, which is why we introduced Agentforce, that Salesforce, which knows your business can go in your flow of work. It plans and reasons, and it takes action, all within your environment, and it scales. So we like to say that if you can describe it, Agentforce can do it. Now, Agentforce is our agentic system, but the question is, how does it work with other agentic systems? So that's why Sam is going to talk about what we're introducing. Thank you, Daryl. Good job on Agentforce 101 course. So I'm sure if I ask you after the session, tell me in one line what is Agentforce, most of you guys will be able to do that. All right, so pivoting to multi-agents. How many folks have dabbled into multi-agent systems or been wondering, like, hey, you know, what multi-agents can do for us? All right, so half the people. That's good. So let's talk about multi-agents. Now, as Daryl described, a single agent itself is pretty powerful. The evolution from Chatbot's co-pilot to Agentforce has been revolutionary because a single agent can work in a deterministic, customized trust layer, and it can have specialized expertise. So at Salesforce, we have customer service agent. We have sales agent. We have SDR agent. We even have employee agent. And for those of you who use Slack, we have Slack agents. And these agents work in conjunction with LLM to be intelligent, to be deterministic, and do their specific tasks very well. However, what if you give an intelligent agent a big task to do? Let's say we have a single agent create an e-commerce platform. Now, when we say an e-commerce website or an e-commerce platform, there are at least one dozen tasks or actions involved in that. So what happens? Your AI agent is going to get overwhelmed, right? Because there will be a depth of a lot of tasks. Even though LLM can create a plan, it will result in a lot of latency and overwhelming behavior by the agent. So that's why we have the world of multi-agents. So what if we have multiple agents working like a team together? And that's how humans do the task, right? We work in a team environment. We do have some cases where we like to go solo. But typically, even in the human world, it goes that one plus one is actually equal to three plus more because the power of two is more than actually two. And the same would apply to agents, right? So to our example of building an e-commerce platform, if you can have these specialized agents which can do their task and work collaboratively together, it could be much more powerful. What are some of the use cases we are seeing, right? So these are just representative. There is a long laundry list you will see of how multi-agents can work together to achieve an end-to-end scenario. But for example, we are seeing early signs of multi-agents working together in the context of software engineering. You can have a developer agent. You can have a quality engineering agent who is writing test cases while the developer agent is writing code. You can have a performance engineer who is at the same time testing the code for performance and scale. How about sales and marketing? So in sales and marketing, in Salesforce, we have sales cloud, service cloud, marketing cloud. And we have a notion of what we call customer 360. So in a B2B scenario, you can have a sales agent working with a service agent, working with a commerce agent, and a marketing agent to drive an end-to-end customer CRM experience. And then, of course, within the vertical of customer service, multi-agents can still play a key role because you can have specialized agents. So think of a general-purpose customer service agent working with a specialized agent. We'll actually have a demo on that. So to summarize it, a multi-agent system within Salesforce, what are some of the key attributes of that? So number one, we need agent-to-agent communication, right? You can have a system of agents working together, but we need effective ways of how do these agents communicate and talk to each other. Both for single agent and multi-agent, we need a standardized way for access to resources and data. And then what happens when new agents join the system? Is the system scalable enough to embrace new agents? What are some of the key benefits of a multi-agent system? So number one, increased performance. Like we discussed before, a single agent can easily get overwhelmed with the depth of tasks, with the complexity of tasks. So you definitely get increased performance with multi-agents. Resilience and fault tolerance. So that's an important one as well, as if a single agent goes down, it doesn't necessarily mean that your whole system is down. And modularity and extensibility is the key as well here, right? So the concept of new agents joining the system, as well as being able to extend the system, both, for example, within the realm of Salesforce, as well as extending it to our partners like Google, Anthropic, OpenAI, and others. However, when we talk about multi-agent systems, there's a key problem. And the problem is depicted here by an AI-generated image. So imagine you have three agents, one built using Google Vertex AI, one built using Salesforce Agent Force, and one built, let's say, Anthropic or OpenAI. Now, they are built on different platforms. They're using different languages to communicate. One might be using gRPC. One might be using JSON over HTTP. So when they try to talk to each other, guess what's going to happen? They are going to get frustrated. So that's where the problem space comes in, is that lack of interoperability between agents. It leads to fragmented customer experience. Because imagine you're trying to build a multi-agent system where agents cannot talk to each other. What's going to happen? You're going to have fragmented solutions, which leads to a fragmented experience. Complex custom integrations. So in the absence of pure agent interoperability, what developers end up doing are point-to-point integrations with APIs, which leads to complex point-to-point systems, spaghetti-like code. And in that context, there's limited context sharing. There are implications to security and compliance. What happens if you are working with an agent which needs extensibility or modularity to use a different OAuth protocol, which is not supported by your API? So that basically inhibits innovation at scale, and it leads to missed growth opportunities. So those are the key gaps we see because of the lack of agent interoperability. Now, having discussed some of the gaps, right, which, because the agents are not able to talk to each other, let's talk about what are some of the key principles of agent interoperability. So that's something which we have been kind of, as a PM on this project from Salesforce, I've been dreaming about it or sleeping over it and stuff. But there is a lot in there, right? So it goes to some of the very standardized foundational concepts which involve the concept of standardized agent manifest or standardized agent card. So as humans, we don't do it anymore, but maybe some of you do have your business cards, right? So when we meet each other, we exchange cards. Or we say, like, hey, you know, now we scan our LinkedIn information. And the same applies for the agents, right? So agents need to have a standardized manifest which identifies the agent ID, name, domain, what are the capabilities of the agent, if that agent has specialization in healthcare or FinServe, right? So that's important. Then there's a concept of agent registry and discovery service. So we need a centralized place for these agents to register themselves and a centralized place where they can be discovered. You guys probably remember the early internet days with DNS-based discovery and all that. So some of those core concepts will apply here as well. And then very importantly, once we have that, you have the concept of identity sharing, context sharing across domains, agent-to-agent communication, state and conversation management. So that's very important because agents, when we are having multi-turn conversation, just like human, that needs to be dynamic. And with Salesforce, since trust is our number one value, we've got to have observability, security, monitoring, and human in the loop. So let's walk through in a fun way of basically double-clicking or going into a little bit more in-depth of each of these options, principles. So let's say a customer comes to an agent-for-sales-force AI agent and say like, hey, I want you to find me a smartwatch with a long battery life, which is waterproof, under $400 or $300. Now the agent-for-sales agent, because it specializes in customer service, it might not necessarily specialize in product research. Right? So think of two different domains. Agent-for-sales is specializing in customer service, but it needs someone who can, based on the customer requirements, find the right watch for a product. So it goes to the agent registry, which we just discussed as one of the key elements for agent interop. And from there, it says, hey, I need a product research engineer. Sorry, a research agent. And out comes the Google Vertex AI agent. So the Google Vertex AI agent says like, hey, hello, I am the Google product research agent, and I can work with you. Now, in the context of agent registry, you can also, if you dive deeper, it can be a topic by itself for a session, but if you dive deeper into some of that, it could be like, hey, you know, what are the different agents available out there? What are their different ratings? What are their performance attributes? Right? So that can also help determine which agent is selected. And then going back to our second or third principle, which was agents now exchanging their agent cards, their information, they're also authorizing each other. Right? Because that's important. You just don't want to pick a random agent and start communicating. They also need to agree on mutual protocol modality. Right? It's going to be a text-based conversation, voice, or it's going to be image. And that will also depend on which agent is selected from the registry. Do you guys remember the 2001, 2002, or late 90s? There was, when you dial up with a modem, it would make that sound, it would communicate, you know, it would negotiate the connection speed. So that's what comes to my mind is like, hey, you know, the agents are communicating with each other using that kind of concept. And then there is the concept of, the core of our theme here is agent-to-agent communication, which involves contact sharing, multi-turn, multi-step interactions, which needs the concept of memory, the concept of session, the concept of async communication with context preservation. How are you managing the conversation ID across multi-turn conversations, across multiple agents? So that becomes very important. And it's, it needs to support multi-modality for interop. So imagine if you have a human who is talking to a voice agent. And, and a voice agent is responding back in voice. But then it needs to communicate with an agent which can do vision analysis. or image analysis. Right? So those are multi-modality use cases which we need to support. So observability and guardrails, that's a topic by itself as well. But imagine if you have a multi-agent system. how are we making sure that we have observability across all these agent interactions. And that becomes especially important in heavily regulated or regulated industries, especially financial services, healthcare, insurance. They, they need a log of all the interactions. And root cause analysis. For example, let's say if the, if the agent failed midway during their interactions, how, what those interactions look like. What happened in the last 24 hours? For compliance, the detailed logs are important as well. With financial services, for example, there needs to be a detailed log of that which needs to be available. Same would apply for agent-to-agent communication. And then think of performance and scale. So, performance is very, very important. We were working with recently with a few of our customers and there were some SLAs specified like, hey, I want the agent to respond within a few seconds. So, that's, that's becomes very important, right? Because you can build a really sophisticated multi-agent system where agents can talk to each other, but then if it is not within the customer's expectations of response and performance, the adoption is not going to be there. So, that's really important to keep in mind as well. All right. Human in the loop. So, that's also a very important principle. What I call what we are basically is the very early days of both multi-agent systems as well as agent-to-agent interactions. So, hence, all the more important that we have human in the loop. And human in the loop means basically that, hey, you know, when the agents are interacting, communicating, of course, we have the concept of observability, we have the concept of card rails, we have the concepts of tracing what happened, and what if the agents are not able to negotiate or resolve a certain condition? One aspect could be that, hey, you know, they can escalate to another agent. But, currently, I think a human in the loop is very important. Similar to, how many of you have taken a Waymo ride in San Francisco or other cities? Quite a few, right? So, if you're taking a Waymo ride, you're actually being monitored by a human in the loop or maybe human on the ride. So, if anything goes wrong, the human can intervene and jump in. So, same applies for the AI agencies that that becomes important. And I think that also builds customer trust that, hey, you know, we are not just relying on AI agents to conduct a mission-critical project or environment. We have a human in the loop who can take over as needed. So, from here, I actually have a pretty interesting demo to show you guys which basically demonstrates some of the key principles we talked about in a real-world scenario. So, on the AV side, if you can switch to the demo, please. So, in this case, we have a Salesforce customer service agent deployed on this Northern Trail Outfitters website. And its job is basically to handle any customer service questions related to product, related to returns or exchange and all that. So, here is the customer service agent and it's basically talking to a customer who is saying, like, hey, I need to return my watch, Solaris Gen 2, because the battery dies too quickly. So, now we are going to show you behind the scenes what's happening in a multi-agent system with multi-turn and multi-interactions. So, in this case, the customer service agent, it identifies the customer intent. So, similar to what I answered that question, our agent force system, it has built-in reasoning and planning service which it uses. It identifies the customer intent which is, hey, you know, it's a return. So, while it is generating, like, hey, okay, I need to do a return, the customer comes back and say, like, hey, by the way, I'm actually looking for a smartwatch which has a longer battery life. So, now, as you can understand, now there is a second intent which has come in, right? And the agent is saying that, hey, you know, I need to actually look for a product which has a longer battery life. So, it's no longer just the return. It seems like it's a second intent. But, because it's a customer service agent, it might not necessarily have the right resources to look up the right product. So, it's going to look up the registry, agent registry, and it's going to say, like, hey, I need a product research agent. And, out comes the Google Vertex agent. So, now, we have a multi-agent system with two agents communicating. So, they identify, they share OAuth, they do OAuth and identity sharing. Now, the Google Vertex agent understands customers' intent, which is, like, hey, you know, I need a longer battery life. So, that's the communication agent-to-agent happening between the customer service agent and the Google agent. And, and the details of that, we will, in our end of the session, we'll talk about A2A, agent-to-agent interop. Now, while the agents are interacting, the customer says, hey, by the way, my budget is $400. So, customer service agent now need to update the session context with that updated information. So, the reason we are including this is to demonstrate a real-world scenario where, imagine, if it was just API endpoints interactions, would that scale? Right? In a dynamic conversation, the answer is no. So, now, Google Vertex agent, with that information, has come up with a product replacement recommendation, and it passes that product recommendation information back to the Salesforce agent, and it says, hey, based on that, I actually have a recommendation. It is Endura Smartwatch 2, and it has a longer battery life, less than $400, and it meets your requirements. And from there, the customer service agent says, hey, would you like to proceed with the return and provide more information on the Endura time? So, that basically demonstrates how, now, from the customer perspective, the back-end agents were invisible, right? The agent for customer service agent handled all the interactions, so the end customer experience is not fragmented, right? The end customer did not have to go, like, hey, you know, I need to go search on something based on these parameters, and then I need to come back here and say, like, hey, you know, can you provide me this replacement? The agent force agent did it for the customer, right? So, it's not a fragmented experience, it's a unified experience with the power of multi-agents. Can we go back to the slides, please? All right, so, all right, so the above scenario highlights, as you can probably tell from a talk track, APIs are not enough, predetermined deterministic workflows do not scale well to dynamic scenarios, and that's where we need an industry standard agent to agent protocol, which is enterprise-grade, secure, is trustable by regulated industries, with observability and guard rails. So, that's where we are at Salesforce, we are really excited, we have been partnering with our Google product team for the last few months, and for some of you, you might have heard the announcement on Google announcing A2A, agent-to-agent interop, and the key principles of A2A are enabling agent-to-agent interoperability, connecting opaque agent-agentic systems, right? So, very high level, but it has a lot of depth in it at the same time. And we have a quote from Salesforce here as well, from Gary, who leads our product team on this area, but we are very excited, like I said, you know, these are the early days, we are excited to see how we can take it from here and make it scalable for our customers. So, with that, I'm going to invite Michael and Todd to the stage and we'll have a Q&A session. Daryl and I are going to ask some questions, and then if we have time in the end, we will welcome your questions as well. Thank you. Have a week. Yes. All right. Welcome, Todd and Michael. Welcome to the stage. Can you give us a quick background about yourselves? Todd, maybe starting with you. Sure. So, my name is Todd Siegel. I'm one of the lead engineers working on agent-to-agent and enterprise applications of generative AI. I'm Michael Vakoc. I'm the product manager for agent-to-agent protocol. All right. Great. So, can you tell us about some of the principles of Google's A2A that you announced yesterday? Can you walk us through that? Yeah, sure. And so, they're showing on the slide as well. So, the biggest one that we've started with is enterprise ready. So, our customers purchase software and services from multiple vendors and they can't ask the vendors to provide many, many different duplicate copies of the products that they're buying. The products have to work together or it's a non-starter. For the products to work in an enterprise setting, they have to be what we call enterprise ready. They have to support enterprise-grade authentication, authorization, compliance, regulatory requirements, auditing, logging, et cetera. So, with that in mind, we designed A2A so that it can fit into existing enterprise deployments and reuse basically enterprise-level authentication, enterprise-level application protocols. with that, it goes into simple and consistent. So, we did not want to invent anything new. We did not want to say, like, here's a brand new authentication schema that's just for agents. We want to say, hey, we're modeling agents as enterprise applications. Reuse everything you have for enterprise applications. We wanted it to be async first and modality agnostic, so that's really a large difference between agents and APIs. APIs are highly structured. They have specific types of inputs and specific types of outputs, whereas agentic interactions are typically conversations. And the modality may change throughout the conversation just like it may with a human. I could be talking to Michael and then I could pull out my phone and show him a picture and then he could do something else as well. And then last, opaque execution. So, opacity is one of the biggest and I think maybe subtlest points of A to A. People are building different agents in different silos with different data. There's not a single agent that you're giving all of your internal and external and personal and work data to. You can have your work assistant, you can have your personal assistant, you can have a family calendar, you can have your internal address book and all sorts of internal proprietary information. A single agent is not going to have access to all of these different lakes or islands of data. Similarly, you're going to have different islands of knowledge and different islands of implementation. Building agents right now is not you just point a model at an API, it's you also give it instructions, you also give it specialized information in domains and rag data sources. Those are not all in a single agent. So if you have these disparate agents that are all experts in different things, you need them to actually work together to complete a task without having to share all of their memory, without having to share all of their data access. If I give the Michael agent access to my personal photo library, I'm not necessarily going to do that with my HR agent, but these two agents may need to work together with completely different access to information that I've shared with them. And I think the important part about the opaque execution as well is the concept of the agent card and even though these agents are opaque, still the client agent needs to understand what are all the available agents for them, right? So there is a concept of an agent registry with a list of agent cards describing the skill sets of these agents, describing the capabilities, like what modality they support, etc., etc., right? And so having the sort of introduction of or registry of all the agents that are available is very critical to all of this. Excellent. Thank you. Yeah, thank you, Michael and Todd. Very informative. So one question I have been asked by folks, both internally as well as customers, is like, hey, how does A2A compare to MCP, right? So how are you guys thinking about A2A and MCP first in terms of both how they work together, what are some of the differences? Yeah, we get this question a lot. And just to set the ground is when people build their multi-agent systems, we expect them to use both, right? So it's not like one is designed to replace the other. We are seeing MCP, very successful, very popular, for connecting agents to tools, right? Agent-to-agent is designed to connect agents to other agents, right? And why is this distinction important is just think about how you, you know, interact with tools. For example, a Salesforce API is you need to find, you need to have a list of known APIs, you have a list of, you know, parameters that each API expects and you have a response from each, right? This is a well-known sort of structured input and output interaction, right? For agent-to-agent, it's a little more nuanced and dynamic, right? When you have an agent, you can have a multi-turn, long-running conversation where the capabilities are not as easy to express in a, you know, finite list of sort of endpoints as you do with API. Yeah. Adding on that, let's take a concrete example. So, a weather API maybe is simple for someone to understand that you give it a latitude, longitude and maybe a date or you give it a location and it returns to your weather information and that could be temperature or maybe a description. But let's say that there's some extremely long-running task that needs to happen and it evolves during the execution. So, let's say in my enterprise, I need to reset my password. So, typically there will be standardized playbooks or runbooks or instructions for how to do this and there may be integration with third-party systems. So, imagine the process for resetting a password. Imagine trying to model it as a straightforward API. Right? How would you do that? Especially considering let's say that reset a password is okay, first go get permission from the person's manager. Then what happens if the manager requires more information? Oh, why are you resetting your password? And then what happens when perhaps during that reasoning check is like, hey, is this really you or are you being impersonated by someone else? I want to start a video call with you or I want you to provide some more authentication information to prove who you really are. So, something simple like a password reset which is going to be some change in a database somewhere, all of the processes around it could have many, many actors involved. Go check with the manager. Go have a back and forth between the manager and the employee. Go to some third-party authentication service that does some live verification over video. Go do some other check that needs to happen somewhere. All of these things are really, really difficult to model as APIs and going to be difficult to accomplish with a single agent. Yeah. So, I mean, to add to that is I think you guys are highlighting more like API versus A2A. I think it would be a good evolution of A2A to work with MCP because some of the demos the audience might have seen as well where MCP can lend itself to A2A and I think that's where we are excited to work with you guys also to see how that interacts and because I think if we have someone from Anthropic here, a point could be made like, hey, you know, the use case you're describing can be done with MCP but I think some of the principles Michael and you guys mentioned earlier around A2A that becomes really solid in terms of why using A2A and use it in collaboration with MCP. So, we also want to give you time to ask Terrell and me a question about, you know, how are we collaborating or so. Yeah, I mean, just, you know, great presentation and I see why you're sort of excited about A2A. I wanted to sort of see like, how do you see the standard and protocol and the collaboration to evolve, you know, going forward and why we're excited for the standard. Yeah, thank you, Michael. So, yeah, so like I said before, we are, number one, super excited about the partnership. The industry leaders coming together and building this out and I see, like I said before, it's the early days, right? So, number one, we are really excited in building it out as an industry standard, driving the standardization in that effort and I like using that term, bring the tribes together, right? So, in terms of like, hey, you know, let's agree upon the common standardization in this area. Second is, I think our teams have a great potential to innovate in this recent area. So, I think that's another area which I'm really excited about is this area is ripe for innovation. Darrell, would you like to add anything? To add to that, you know, we are, as part of our prompt builder, we already have Google's Gemini models available. We are going to have it within our Agent Force as well directly so customers can choose to use Gemini within Agent Force directly. So, the partnership is evolving. We've announced a great partnership with you and there's a lot that we are going to do together and are doing together so very excited about that. I think we are, go ahead. Just to add to, you know, the open standard, I just wanted to do a quick call out. So, the protocol, the specs and there are also samples that are available on GitHub so if you just go to github.com slash google slash A2A you can actually, you know, see details of that protocol, you can see, you know, some samples so you can try it out and I encourage all of you to do it. You can even, you know, raise issues and comments and we would love to have everyone's involvement on that. And please take a scan of this as well. You can learn more about our partnership with Google as well. So, you can read the announcement, you can go dive into it and definitely look for the GitHub page that they've mentioned. . . . . .