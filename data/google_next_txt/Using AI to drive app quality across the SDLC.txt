 Hey, y'all. How you doing? Good? Yeah? You look great, all of you. Excellent. All right. Well, good afternoon, developers, data scientists, SREs, builders of all kinds. Y'all, this week has been actually kind of impressive for me. It got me thinking about some of the more, I don't know, magical things that I have seen in the last 25 years or so. If I, you know, think about it, maybe back when I was a kid, the Apple IIe and the Tandy 1000 kind of gave me a kind of a run for my money. Later on, you know, the year 2000, the dawn of the new millennium, Adobe and the web made this possible. If you're not familiar with it, YouTube it, it's a hoot, right? Then back in maybe what, 2009 or so, DevOps become became a thing. And now it feels like every month we've got a new large language model bursting onto the scene. In fact, we just, as you know, released Gemini 2.5 Pro and is already showing amazing results, particularly for coding scenarios. So if you have not already tried it out, it is available in Code Assist free tier for you to use today and the ID of your choice. Throughout the talk today, we're going to have some QRs. The pop-ups that keep your camera phones handy, pop this and it'll bring you to exactly where you need to go. Now with that, I want to give you a kind of another little one here. So many of you are probably familiar with the door report. Yeah, right. It kind of every year comes out. It's a tent pole of the industry right there with maybe stack overflows, annual developer survey and Octaverse. Well, according to that report, 76% of technologists are already using AI as part of their daily practice. I suspect this does not come as much of a surprise to any of you, right? But the door report also reveals another surprising number here, right? So check this out. Among those organizations who have integrated AI into their regular engineering practice, we are seeing a 7.2% regression and delivery stability. All right. I have always wanted to hear a room full of hundreds of developers give a sad trombone sound. So do it with me here. Wah, wah. Yeah, that is not really good. That is not what we want. And I've actually seen the same sentiment echoed online as well, right? It is worth asking, are we vibe coding our way into massive technical debt? So I want to put a stake in the ground. 2025 is the year that we deploy AI, not just to write more code, but to build better apps. So strap in, right? In the next 40 minutes, we're going to show you how to, yeah, yeah, absolutely code faster, but also to build higher quality apps consistent with your team's best practices. We're going to do this in a demo of four parts. So first you're going to see Gemini Code Assist agents in action, modernizing a legacy app with code and documentation updates. Then we're going to use AI assisted tooling to design and deploy infrastructure for our app to Google Cloud. Next, we're going to show you how Gemini Cloud Assist and Cloud Hub are making troubleshooting faster and cost optimization easier. Finally, four, we will unveil Firebase Studio and use it to build a brand new app in minutes. It is a lot indeed. But keep out, well, keep an eye out for those QR codes in each section. And you know what? In order to do this, I can not do this alone. I am just one man, frankly, crippled by a short attention span and social media. I am going to need some help on the stage. So for that, I am pleased to welcome Aaron Wanjala to the stage to help us out. Aaron, come on up, buddy. Buddy, welcome, welcome, welcome. Hit up high! Yeah, buddy. All right. Welcome, dude. Yeah, thank you, Ryan. Folks, I am thrilled to introduce you to an app called Symbol B&B that we built for vacation rental property owners. As Ryan mentioned, this is a legacy app, so the code and documentation are a bit out of date. And there's some new functionality that we'd like to push to our customers. So, Ryan, you ready to get this started? Yeah, let's do it. Let's do it. All right. Now, as Aaron brings up VS Code here, he's already cloned the repo out of GitHub and he's got it open. Now, before we get started, Aaron, I am a product manager first and foremost. I'd like to do everything out of a requirements doc. Can we actually pull down the requirements for the demo that we're about to do? Absolutely, Ryan. To do that, I'm going to kick it off by going to the Gemini Code Assist chat here and interacting with the docs tool by saying, at Gemini Code Assist, let's summarize our Symbol B&B project plan. Awesome. All right. So while that's spinning, I want to describe what's actually happening. Here, Aaron has invoked a tool. That tool is using an API to go out to Google Docs to find all of the docs that Aaron has access to. And in this case, it's summarizing a very particular doc. Actually, there it is right there, right? The wonderful thing about LLMs is they're good at aggregating and synthesizing and summarizing information. And so we're able to shortcut that a little bit by bringing it in here. Yeah. And so we can see that Gemini is telling me that, number one, there is an old API that we want to update from Java 8 to Java 21, the latest version with LTS. Next, we want to make sure that our documentation keeps up with that big change. So we're going to do some documentation creation. And then the fun part, we want to add a new feature for our users that converts photos to videos. And then finally, we want to make sure that all this new code gets to our customers by migrating it to a new Google Cloud modern infrastructure stack. Awesome. I love it. I love it. That is a tall order. And I am an average developer at best. But together, I think we're going to get through it all. Well, I want to take a moment to pause here. We talked about those QR codes here. So here's another one for you. What you just saw, Gemini Code Assist tools are available for you to use today. And the wonderful thing about these tools is that it's not just about Google Docs. It is about so much more. We have, I'm going to slide forward here, we have integrations built in with Atlassian and Snyk and DataStacks and GitLab, all these other tools that are already part of your daily workflow. All that you need to do is download and install Gemini Code Assist, hit that at symbol in the editor, and you'll have access to a wide variety of different dev tools right there from within Code Assist. All right. Now, we're about to get into the agentic portion of today's conversation. And I kind of want to admit something here. TechCrunch actually quoted me on this a couple of weeks ago. The word agents, it's a bit overused. You've probably heard it a gajillion times this week alone, not just in the hallways, but in blog posts and press releases and the like. But I want to take a moment here to really define agents so that we can have a conversation about their potential. So to me here and among this room today, let's define them not as a, you know, a macro with a predefined set of steps that get executed, but rather as essentially a way of executing a multi-step plan that is defined by the large language model itself with the large language model having the opportunity to modify that plan as needed. Effectively, what that means is that an agent is automation made possible by AI for ambiguous tasks. All right. So with that said, let's start by giving this Java migration out of the way. Let's do it. All right. So as you can see here, the Java migration is version eight, and that is old. Like, dude, where did you get that? I mean, it's still working for us. It is like, like that was been deprecated a long time ago, but hopefully we can use our agents to actually address this. And so I think what we probably want to do here is we'll open up our Gemini chat window here. Great. Thank you. And let's get it going. I'll go ahead and start it by typing, please migrate this repo from Java eight to Java 21 here. And it's underway. All right. So what you're going to see here in just a moment. Yeah, there it is. We have this Kanban board that just opened up. So we foresee a world where developers are deploying fleets of agents to do your hopefully evil, no, good bidding, good bidding, good bidding. Now, as you're deploying all of these agents to go out and do your bidding, it's likely that you're going to need to track their work. And so what way do you collaborate with your team members? You do it with the Kanban board. What we've got here is right now the agent is spinning up and it's probably sorting out what the plan should be. And it's going to need to kind of ultimately ask us whether or not that is the right plan for the job. In fact, oh, here we are, dude. Yeah, actually there it is. So now we can provide feedback on it. Now, this one looks fairly pedestrian. What have we got? Yeah, we're trying to understand the code base here. That makes sense. Then we want to actually do the migration as expected. And then finally we want to test our change works. Okay. Yeah. Sounds good to me. I'll say LGTM, baby. All right. LGTM. Now, while that's going out and doing its work, I want to do a little callback here. Remember at the top of the show, we talked about the door report. Well, as an industry, I really feel like we've been so dang focused on increasing productivity and throughput that we've kind of lost our way. We've kind of lost our focus on quality. And I said, mark my words, 2025 is the year that we write not just more code, but better code. And this is one good example, I think, of how we can use agents to drive better quality into our apps. Because when we modernize the dependency, when we take that update, we get all the bug fixes, all the security patches, all the new features that became available. We effectively eliminate a mountain of technical debt. Oh, hey, there we are. All right. Well, we've got the changes ready to queue up here. Yeah, absolutely. I can pull them out of this little staging window here and open up the diffs. And yeah, from the top, we can see the major version change of our spring version. That's important. And then the matching Java 8 to 21 version increase. Hey, 21. There it is. Yeah. And then moving into our dependencies, we got rid of an old deprecated time library here. And we went ahead and upgraded our imports and our date formatters to match. And then for a major language level win, we've also changed to the pattern matched switch expressions, which are shorter, easier to maintain, easier to read, just overall a big win for devs. Excellent, dude. I love it. Well, I don't know. I have personally spent more time updating SDKs than I like to admit in the kind of the last decade. I'm looking forward to, I don't know, spending more time at the gym and becoming a better person. All right. Well, with that done, the next step was to update our documentation, right? Correct. Excellent. Well, at least for me and all the teams that I've worked on, we're on a perpetual hamster wheel to keep docs up to date. We're all so busy slinging code out. But in this case, we've got an agent to actually do our work for us. That's exactly right. And as you said, the agent is already actually connected to our repo. And so we will automatically update a set of documentation for us every night according to the new code that we commit. And we'll actually be able to interact with that agent in the same way in the Gemini Code Assist chat here by going at documentation, show me the wiki to open up the doc set. Show me the wiki. All right. Now, as this comes up here, oh, there we are. Show us the wiki. What it's going to bring up here is, well, your standard wiki, organized hierarchically so that your developers can read and peruse it at their will, which is, frankly, great if you just kind of want to maybe familiarize yourself with a code base, do some casual reading before bedtime. But often, it is the case that, you know, what you really want is you want your developers to be able to ask questions directly of it so that you can get the context in situ or, frankly, so that you can also use that same documentation to elevate and increase the quality of the responses that you get out of your models. And what do we got here? Yeah, I'm trying that out. It's a pretty powerful, straightforward experience. You can just ask it a question like, which libraries are we using for connection pooling when we're contacting Cloud SQL? Something that could have changed, a major version of Spring, but let's see. All right. You'll also see that when you get a response from the documentation agent, because it's so familiar with everything in your code base, it gives you more than just a service level response. We can see here I have a direct link to the code in a relevant file and the section of the documentation that I'm asking about. Pretty cool. Dude, hell yeah. That is awesome. That is awesome. Cool. Let's take it back to the slides then here. So I'm going to kind of call back again to that Dora report, right? Now, the Dora report, in addition to talking about kind of regressions and delivery stability, it gave us a couple of bright lights, right? One of them is that teams who keep their documentation fresh and up to date, that's their internal engineering documentation, are 2.4 times more likely to meet their reliability targets. And so when you've got agents who are out there to help you keep that documentation up to date, it is a huge win. Now, I am thrilled to announce here that everything that you just saw in these last few minutes, that is to say the documentation agents, the ability to do code migration, to generate unit tests, is all available. Not only that, these are general purpose agents. You can use them to, I don't know, auto-generate code to implement new features, create a full app from a product specification stock. Heck, you can perform adversarial testing on AI models that your app is using, right? And of course, you know, the neat little Kanban board, it's in there too, right? So join the waitlist for the preview by using this QR code right here. Do I look good? Yeah, all right. All right, let's move on to the next step in our project and add a new feature. Now, for this, we've got another dev on the team who's been working on it, and they've been assigned the task of creating a feature that will convert those tired old JPEGs and PNGs of our rental properties into glorious videos in Technicolor, right? Now, for demo's sake, let's pretend we just got ourselves an email saying that it's done, and we got a pull request open, and I see that we've got GitHub right here. That's exactly right, Ryan. And we can see that Gemini has not only given us a bit of a summary here, but it's complete with highlights and, oh, wow, actually, a poem as well. Hey, all right. I'm going to do this with my best Dylan Thomas. From images still, a video's born, with AI's touch, a brand new morn. Each frame has seen a vivid tour of properties grand forevermore. It's nice to have a little bit of humanity in your PRs, right? I honestly, I usually only write like a single line bug fixes in my commit changes, so this is way better than I would do myself. Yeah, it's got me beat too, Ryan. But beyond the wonderful summary and the poem, we've also got feedback on code quality, security, and alignment with our team's best practices. For instance here, we actually have a critical style guide violation here where it's saying that because we're generating media with an AI model here, we have to use the safety settings. Yeah, I want to pause for a second and kind of like examine that because one of the points that you made here is this is one of your team's best practices, right? So when we are performing code reviews here, we are not just applying the general knowledge that is baked into the large language model, the Gemini, to the code review. No, no, no, no. We're doing so much more than that. We are also applying your organizational best practice into it. You can codify this in essentially a YAML file that's embedded in kind of your GitHub repo, so you can have different best practices for each repository, for each service. And that is really important because the definition of good isn't the same everywhere. Good in your mobile app does not necessarily look like good in your BI app does not look like good in your cloud service app. This is key. Yeah. Yeah. Keep taking us through it, man. Should we add a new feature? No, absolutely. We should. So what we can do is now that we've gotten, we know that our code is safe and secure, we can also make some changes like what if we did some image scaling to protect our service from large uploads slowing it down. Love it. All right. So I can go down to the video controller here and what I'll do is I'll just open up a single comment here and just ping at Gemini code assist as if I'm talking to a teammate asking them to do something and I'll say, please scale all images to 1080p before continuing. Right. And I can just set the single comment and refresh the PR and you'll see that Gemini not only responds with a description of what it thinks I should do, but also dependencies, imports the actual code to implement the feature. And if it looks good to me, I can just go ahead and commit it right here. I love it. Now I want to take a moment to underline this point too. One of the kind of the differences that I see between maybe developing in the aughts versus developing today is that the number of places that we can go to actually build software to write new code is multiplying. It used to be that all new code had to be written directly in the IDE, but as large language models are doing more of the work to write the actual syntax for us, we can start from so many more places. Here, Aaron has shown us kind of giving an instruction in GitHub, but you can imagine starting from, I don't know, Google Docs or from Gmail or from Slack, anywhere else. All right. Actually, we'll do a quick little camera moment here. We're going to do that. I want to go back to it because I do want to show this Gemini code assist for GitHub is available for all of you to use today. Bring out those camera phones again. This is installed as a GitHub app, so you can install it once and enable it for all of your teams, all of your repositories, and everyone can get the benefit of both of those PR summaries as well as the critical evaluation that comes as part of the code review with a poem included, our gift to you. All right. So let's switch gears here and get working on our infrastructure up and running because, you know, it's not all about writing code. Standing up infra is an important part as well, right? Now, at least for me, this can often be slow and confusing work. I am more of a, you know, a code jockey than I am an infra guy. And so I often have to go to folks like Aaron for a little bit of help. The challenges are like configuration is difficult. Regions and the best practices. There's so many check boxes and radio buttons to click. I don't always know where to go. I kind of need someone by my side to show me the way. So Cloud Hub and Cloud Assist are where we go to actually get that help. No, absolutely. I'm glad Gemini has got our back here too. So we're here on the Google Cloud homepage where I do a lot of my ideation work. And I'm going to open up the Gemini code assist chat here and just give Gemini a bit of a description of what we want to do to get us started. So I'm going to say, I want to create a house listing application where users can upload their home pictures and create a rental ad. And I want to organize all these resources with a little house listing prefix so that we can know what we're looking at. I love it. We're giving in the entire business model to Gemini. Hopefully it's better for it. Yeah. All right. Absolutely. And you'll see that Gemini comes back not only with a description, but also with a diagram here that shows us what the services would look like. Oh, that's hella cool. Right on. Yeah. And finally, a button to enable us to edit this in the application design center. Awesome. Well, in application design center, we can dive into the architecture diagram to get a full view and kind of a better read on it. Of course, you know, Gemini remains there by our side so we can make refinements. We can manually add or adjust to the designs in the visual canvas. And behind the scenes, this is writing Terraform for all of our infra designs. So you can see that Terraform by on that get code button there that Aaron is highlighting here. And the Terraform is easy for us to export so that you can use it in your own internal developer portal or deployment pipeline of choice. It is also, of course, automatically saved in the app design center template catalog so that you can share and use it later on. Now, Aaron, is this looking good for you? Like I said, I'm kind of a newbie at this. Yeah, no, Ryan, it's looking like a really reasonable start. It is missing the microservice that we just tried to add. So I'm going to go back to the Gemini chat. All right. And just ask it to add that. I'm going to say, please add a new microservice that can read images and use Gen.ai to auto-create listings with the right description and video. And we'll be able to see that not only does Gemini adjust our diagram here, but it gives me the ability to accept or reject the changes. Hey. All right. Well, let's have a little reality check here. All right. So application design center has given us a great starting point. It's given us scaffolding and sensible defaults, but this is also where Gemini's job ends and your job begins. This is where human in the loop becomes important, right? You may want to make choices about the deployment regions, about environment variables, and all the other details that really make your application unique. But having the agent there allows us to get there so much faster. In fact, Aaron, I think you got a couple of changes to make here as well. Yeah, no. In fact, folks, in just the time it takes for your boss to inspire an audience, I've gone ahead and made the necessary changes, made sure that the service has a region, a name, and an environment variable. And so now this checkbox has turned green. Do y'all feel inspired? Yeah? Okay. All right. And so you just have to go through and repeat that process, checking off each service, making sure it's in a deployable state. And then I've already done that here. You'd actually be able to hit deploy right here and send it off to the races. Now, of course, in your org, you may want to put this through a pipeline and make sure it goes through the right checks and balances, but we're having fun. We're on a demo. So do you want to just see the feature? Let's just go to it, man. Let's go to it. All right. So we can see the listing page is populated. They all look great. Who doesn't like a lakefront view, right? So we have our photo selected and I'm just going to go ahead and hit generate. Let's see. Oh, dude, I cannot wait. I cannot wait. Well, that's doing its thing, though. So I'd like to pause for a moment and reflect. Like this, I never could have done alone, but with the help of Jim and I, we were able to get through it in what, last four minutes or so? Pretty incredible. Actually, it looks like it is done. So let's hit it. Yeah, let's see it. Oh, yeah, baby. Jim and I at work. All right. Well, let's head on back to the slides. Again, I'm glad to share with you that Application Design Center is now in preview and available for you to start using in your workflows. This here QR code here will get you to the right spot. So snap a picture. All right. All right. All right. So we've covered how AI is helping with application development, modernization, improving speed and quality. But as everyone who is push code into production knows, getting the bits out into the user's hands is just the starting line of that marathon. Now, a recent study from Slashdata shows that developers today spend more than 20% of their time on cloud operational tasks. Things like monitoring, troubleshooting, cost optimization, stuff that just kind of keeps the trains running on time, right? Now, we are delivering a new experience in Google Cloud to help you simplify those management tasks, the operations that really take up, what, another fifth of the developer's work week. It is an experience that is both app-centric and AI-powered. And the front door to that new experience is CloudHub. And I am proud to present CloudHub. Dun, dun, dun. Right. So check all this. This is your application-centric kind of home base for everything that is in GCP that accrues to one specific application. It shows you deployment status, cost optimization quotas for the entire application. It has been a personal dream of mine for over a decade to build something like this. And guess what? CloudHub is available today in preview. So go to the console, type CloudHub in the search bar to find it, or as always, you can go to this QR code to find all the information that you need about it. All right. With that, let's jump back into it because we've got a lot more to do here. Let's do it. All right. Now, to set you up for the next part of the demo here, we're going to need some traffic coming in. So Aaron has already started up a load testing tool to simulate traffic. And I see that we've got an alert kind of popping up here. There's an issue. Aaron, what's going on? Yeah. No, I'm seeing that too. So I'll just scroll down to our logs here. And yeah, we're seeing a ton of 429s. So that would explain it. So I can just click this button here, the investigate button, to actually preload the error message payload into the investigations tool. All right. And when I click create, it'll create a Gemini investigation. And we can actually go and view that investigation over here. Awesome. So it looks like it has one observation for us. We're getting some 429 errors. Yeah. Okay. We have our instances set to two. Our max instance is set to two. And it's recommending we increase it to 17 to meet the capacity we're seeing. Okay. Now, before we go on, I want to talk a little bit about what's happening behind the scenes here. So what we're actually doing is we're taking all of our alerting information, our logging, information about the application configuration, even code when it's available from the application itself, and pairing that with a whole host of common issues and playbooks that we've seen across GCP in order to present you with a short list of hypotheses that help you get to the possible solution as quickly as possible. And that's exactly what's happened here. We've gotten a good observation and a possible remediation. Let's see if this is the right one. Absolutely. So to fix this, we can go right back to our new favorite place, the application design center. And let me find our front end service. There it is. And we'll look at the max instances that are currently configured. Yeah, two, as it said. And we'll just set that to 17. Like Gemini said, save. Awesome. I love it. I love it. Cool. All right. Anything else that we need to button up? Yeah. And you know what, folks, you might think 17 seems high. You might be worried about keeping those distances around. But Cloud Run scales down so fast when there isn't traffic that it isn't really a risk to have this high limit set. So yeah, once you want to deploy this, you can just go ahead and deploy as expected, and you're off to the races. Awesome. I love it. Cool. Well, pull out those phones. It's another Kodak moment here. Gemini Cloud Assist and its investigations preview feature. Ha! Investigation feature is in preview today. Go to the Google Cloud Console and hit the Gemini icon to experience it for yourself. Or as always, you can follow this QR code. All right. Cool. Aaron, now that we've got the application running smoothly, let's take a look at Cloud Hub again to see if there are ways that we can optimize the cost efficiency for this application. Old daddy nickelbacks don't like to pay for anything. You don't have to. All right. Yeah. Sounds good to me, Ryan. So to do that, I'll open up the optimization tab in Cloud Hub, and I can scroll down to our utilization summary, and yeah, wow. Okay. We have 0.4% usage of our Cloud SQL instance. We were expecting a tidal wave of new traffic to be coming in, so you know. That's fair, but until we 200x our users, we can probably trim that a little bit. All right. All right. You're the boss. You're the boss. And would you guess, to fix this, we can go right back to Application Design Center, find our Cloud SQL instance, and take a look at the machine family we've got on board right now. Yeah. No, it looks like it's a DB perf optimized N32. And for those in the crowd who may not know, that is 32 vCPUs, 256 gigs of RAM. It is huge. It is the Cadillac of CPUs. All right. All right. Well, now that we've got that fixed, I think we're good to go. Yeah. Save and deploy, just like everything else. All right. All right. Well, hey, all you FinOps folks in the room, holler at me, girl, right? Now you have another tool to help drive cost efficiency in your infrastructure. With Cloud Hub, inefficient spending is called out directly for you. It is personalized for your application and can help you right-size all your resources pretty darn quickly. Pretty darn quickly. All right. Take it back to the slides here. Cloud Hub's cost optimization is available for you now. You can sign up with this QR code to get access. Now, what you've seen so far is how Gemini Code Assist and Cloud Assist can help teams tackle complex modernization projects and operate in an app-centric way. But I don't know. What about the everyday developer who just wants to take a new idea and bring it to life out of thin air, right? AI should be there to empower people at every stage of the software development lifecycle. And so for that, I am genuinely delighted to invite my good friend, Janine Banks, to talk about Firebase Studio, our new agent development environment that makes building full-stack AI apps fast and easy. We're going to see how Janine can prototype a companion app for Symbol B&B in just a few minutes. Janine, come on out. Thank you, Ryan. It's good to see everybody here back at Next. Okay. So we're here at Symbol B&B, right? And Symbol has been hearing from their hosts that the guests are asking lots of questions about the rental properties. Now, these questions range from things like, how do I operate the coffee maker? Or do I have to leave the dishwasher on before I leave? And if you're like me, who stayed at a rental property, you're asking about the broken heater for the hot tub. Well, that doesn't sound great when you have guests asking questions at all hours of the day like me. So wouldn't it be great if we can give an app to the guests to be able to answer their questions at any time of day so that the hosts don't have to? Well, that's where Firebase Studio comes in. It's a new agentic development environment for building complete apps that run on the web. Let's take Firebase Studio for a spin so we can quickly create this app for Symbol B&B. And we have Firebase Studio right here, ready to go. Before we jump in, of the millions of developers around the world who have used Project IDX, Firebase, or the Gemini app, Firebase Studio should feel pretty familiar but fresh. And that's because you get a cloud-based AI workspace that lets you import your existing repos or you can start something new. Also, if you log in for the first time as an IDX user, your workspaces are already waiting for you. Then you can use Gemini and Firebase for AI coding throughout your entire development lifecycle. So what we're going to do is instead of right now jumping into building a production quality app, which we definitely want to do, we're going to just first use the app prototyping agent to do some iteration on this idea. And we'll just give it a simple prompt to get started. So here in Firebase Studio, create an app that displays the rental property details. Okay, those are things like the name, create an app that displays the rental property details. So let's create a website address. Let's also grab a YouTube URL. And of course, we have to get those house rules. And then we want to allow guests to ask questions about the house rules, right? That would be awesome. All right, questions about the house rules. And then, of course, we need to mock an API to get the data. There we go. Love it. That looks pretty good. Let's just like make sure we're really good. All right, we're going to prototype with AI from there. Now, what's happening is the app prototyping agent is generating what we call an app blueprint. You can think of this as like a type of mini PRD. And as you see here is generated some overall scheme of the features and the style guide for this app. And of course, it has things that I asked for the property name and other details. But it also has something I didn't directly ask for. It inferred that I need rule based question answering using AI, which is pretty sweet. And then I have my color guide here. But I don't know if that really represents the symbol BNB brand guidelines. So let's update that. We will say, replace, let's replace the colors. Oh, right. Replace the colors colors with the brand guidelines. In the attached. In the attached. Here we go. And then we're going to attach a file because the app prototyping agent is multimodal. So we have our style guidelines here. Great. Let's submit that and get those colors updated. Sweet. That looks like we wanted to. I think this looks pretty good. Let's generate the app. So while it's doing that, you'll notice that when you use Firebase Studio, it's collaborative. That means your teammates can work in the same workspace. And you can even see each other's cursor while you build. Also, behind the scenes is doing a few things for you. It's generating and provisioning your Firebase project on the back end, as well as a number of other things that you need to test it locally. And then when I look over here, right, we did see that it's going to use generative AI. So it also suggests that I enter my Gemini API key. Now, I didn't configure one. I'm going to choose to auto generate. Once this app is fully ready, I can also go and publish directly from Firebase Studio. And it'll deploy to Firebase app hosting, which, by the way, is generally available as of this week. So how about we go try this now? Let's see this work. Can I bring a pet? That seems straightforward enough. We have those. Hmm. Rental Pal AI says no pets allowed. Okay. Well, that's cool. But if you remember, I told it to mock an API call. It didn't have access to my listing's API directly. So what I want to do is go in with one click and switch to my coding workspace. Fully available right within Firebase Studio. And yes, I want to get to my production quality app, even though five coding is cool right now. So we're going to check out what we have here. We have a full VM with 100 GB of storage locally. I also can do anything that I would normally do in my local IDE. I have access to my terminal services. I can also go and install extensions that I like to use from OpenVSS registry. I can also just work with any of the files that are here. So let's check it out. We have our AI directory. We have our app directory. Let's expand those. Cool. And when it generated, when I used the Gemini API key, it auto-generated the flows, the orchestration for my app to do the question answering. How did it do that? Well, the app prototyping agent understands the Genkit framework, which is our AI orchestration framework tailored for application developers to be able to orchestrate AI inside their apps. So let's check out this flow. Here. We have our input. Let's just expand this over. So we have our input schema, output schema, structured output, and being able to have a type schema ensures quality of the application, which is ultimately what we're aiming for. Also, just like we wanted, it's using AI, Gemini API, and it's using Genkit, like I said. Now, when we look at the app folder, there's an API folder in here. Let's check that out. Bingo. That's the mock property data that we want to replace with our actual data. So let's go ahead and do that. And the nice thing is that we also have Gemini readily available in the coding workspace to assist us as we're doing coding. But the thing is, when I'm using the app prototyping agent, the agent is more in control, and I'm guiding it with my prompts. Here, I'm in control, and I'm getting some help from Gemini, but I want to be in control. So let's go with that. And we'll say fetch the listing's data from this file. And what we'll do is have it actually not from the file. What I want to do instead is I'm going to save from the details below. How about that? And then I'm going to copy and paste it from my fetch folder that I have here to save some time. And we'll put it below. There we go. Good. Let's make that happen. So now it's making some changes pretty fast. And the cool thing is I can review it. And so I check it out, and I do see that now it's calling my listing's data rather than the mock data. So I'm going to say yes. Update this file. It looks good. And so now what I want to do is go to my web preview, which I have here as well. And I can even open it up in my browser in another tab. So let's do that. And I'm going to ask it this time, hmm. You know, if I had time, I would ask a prompt from the audience, but I won't do that. So let's see. Do I need to turn on the dishwasher? How about that? And it says no. You need to wash and put away all the dishes. Okay. Cool. And I'm just going to go out on the limb here and ask about my broken heater for the hot tub. All right. Let's see. How do I fix the heater for the hot tub? Okay. Because of course, who rents a property without a hot tub, right? Let's see. Oh, what? There's no hot tub. Who rented this place? Okay. So what we just saw is the ability to build an end-to-end application using AI assistance, whether you're vibe coding or you're doing serious coding. And the other thing that is pretty cool too is if I want to get back in the vibe and speed up my flow, I can always switch back and forth, go right back into prototyping mode and continue to prompt from here. And I can go back into coding and whenever I'm ready, publish. So the thing is, you're in the driver's seat the entire time. And that's my time. We saw Codis' agents earlier. And the cool thing is that Codis' agents are also available in Firebase Studio. So when you check that out and you sign up for the waitlist, you'll be able to leverage those agents like AI testing, migration, and code documentation right within the same environment. With that, thanks everyone. I hope you are trying it out and look forward to seeing what you build next. And no pun intended. Thanks. Oh, heck yeah. Thank you so much, Janine. Damn, that was cool. Damn. Look, our time is winding down. As Mr. Rogers like to say at the end of each day, we've learned a lot today, haven't we kids? Yeah, we've taken quite the journey. Well, it's time to get at your mobile devices for a quick recap of all today's announcements, right? So first, we used Codis' tools to summarize a Google doc within the IDE. That same doc then became the starting point for prompts to spawn agents. And those agents migrated our ancient Java code from 8 to 21. And we tracked agents' progress in our Kanban board. Later, an agent reviewed our code on GitHub using guidance specific to our team's best practices. Then, after modernizing our app and converting JPEGs to video, we used Gemini to write Terraform and deploy our app into Google Cloud with Application Design Center. We performed load tests and used Gemini to investigate the root cause of a failure. And because money is always a problem, we optimized the infrastructure before moving to production. And finally, Janine showed us how to build a new Agentev app in minutes. And you can join the waitlist for those agents right here. Not bad for a day's work, am I right? Yeah! All right. Now, if you're looking for everything you need to get started, don't worry. We've packaged it all together with Google Developer Program Enterprise tier. We're providing you with the tools, the environment, the integrations from partners, including Harness and GitLab and Sneak and JetBrains and the AI assistants packaged together in a simple way for anyone to buy. Now, I encourage all of you to sign up today following this QR code. And, and again, because money is always a concern, you get 25% off the premium tier with the code NEXT25. All right. I will leave you with this. Each decade, tech gets a little smarter. If I'm being completely honest, my cultural references get a little bit more outdated as well. And the tools make building just a little easier. The developer tools we saw today are magic compared to what I thought was even possible 10 years ago. And yet, they are still just that. Tools. The real magic is in the imagination, the creativity, the critical thinking, the hard-won expertise of you, everyone in this room, us. Agents are in their infancy. They are certain to be with us for a very, very long time. But still, they are merely a tool for building your ideas. We have a lot of new tech to play with. I hope you enjoy exploring with it. But even more, I hope you enjoy building with these tools. Now, go have a great night, you crazy kids. Paint the town red. Have a wonderful time. We'll see you next time. Bye-bye.