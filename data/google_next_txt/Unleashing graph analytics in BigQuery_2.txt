 Hello everyone, welcome to Graph Analytics in BigQuery. If you look at the world around us, you can see many types of data are mapped in a graph. Take retail for example, you want to build a customer 360 view so you can better understand your customer to provide more personalized product recommendations. In finance, based on who transfer money to another account, you want to build a finance graph so you can detect any suspicious activity in your finance graph. In social media, based on who you follow and who follow you, you want to essentially find out who are the most influential people in your social network. In healthcare, based on how one chemical is interacting with another chemical, you want to build a chemical graph so you can use the information for drug discovery. However, we noticed that a lot of the customers like yourself are faced by three major challenges when it comes to adopting graph. The first one, data silos and maintenance overhead. A lot of the time you have to move your data out from BigQuery or single source of choose to a standalone graph database. This can lead to issues like data silos, data duplication, and data drift. Second is performance and scalability bottleneck. It usually works well if you start from one single node, but if you want to scale it to millions of nodes or customers, it just doesn't work. And then lastly is the lack of graph expertise. At the end of the day, you still have to learn how to set it up, how to configure, and how to learn an entire new framework to make it work. So the approach that we are taking is probably very different from what you see in the market to solve these challenges. Instead of you taking your data out to a standalone graph database, we are bringing graphs to your BigQuery data at scale. Now you can map relational table to graph with zero ETL. You can fully interrupt your graph query with SQL with full interoperability. And thirdly, all of this is powered by a BigQuery large scale analytical engine that we've been optimizing for over a decade. With BigQuery graph, first you can have a built-in graph experience. You can write graph query language, GQL, to traverse relationship among your graph. And GQL is also part of the SQL standard. You can mix your graph query language with SQL, which allows you to leverage the best of both worlds. There's familiarity of SQL as well as the expressiveness of graph query language for pattern matching. One of the key benefits of having graph capability in your BigQuery data warehouse, now you can leverage all of the other capability that BigQuery has to offer in the entire ecosystem. Now you can do vector search and a full text search on those edges in your graph. We all know a picture is worth a thousand words. So, so is a graph. Now you can showcase your data insights to your stakeholders, to your customer, in a much more intuitive way. And this is all powered by BigQuery large scale infrastructure that can scale your graph to billions of nodes. Now you have your BigQuery graph already created. You can leverage Spanner Graph for online serving for up to millisecond latency. You can achieve all of this using a unified graph interface. Now let's take a look at how it works in three simple steps. First one, you create graph schema on top of relational data. Second, you write graph query language to traverse relationship and find those hidden connectivities among your data. Thirdly, you visualize graph results in a notebook. Now let's see how it looks like using a financial graph as an example. Imagine you already have the tables created in BigQuery with information like account, person and some others. Now here's how the magic happens. You map tables to graph. First, you define the nodes that you want, account, person. Then you define the relationship or edges among those nodes. Transfer represents accounts transferring money to another account. Ownership representing person owning one account or multiple accounts. Now you have your graph already modeled. Now it's time to write some graph query language to find some interesting insights. In this example, what you're trying to do is find a person whose name is Jacob, what account that he owns, and account that he pays for his account. Now with this capability, you can express the business logic in such an intuitive and easy to understand way without even having to write multiple drawings or even understand underlying structure of your data. Lastly, it's time to have some fun. Now you can visualize graph results in a notebook. Now you can explore the node connectivities and the neighborhood information all inside BigQuery Studio notebook. It's also available in CoLab and Jupyter notebook. This is just the start of our journey. If you want to partner with us, we're excited and feel free to scan the QR code and we'll reach out to selected partner to continue along this journey together. Thank you so much for listening.