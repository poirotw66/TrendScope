 James Kahneman Reviewer Thank you. Welcome, everybody. I know it's early for a lot of you, so my promise is we'll try and make this as fun as possible. I'll try and talk for as little as possible. I'm moderating the panel here. My name is James. I run the platform engineering community practice at Google Cloud. I've been working in platform engineering for quite a long time at different companies. We're just going to do some quick intros. We'll do about 30 minutes of sort of panel discussion. I want to save some time at the end for about 10 minutes of Q&A, so think of those questions. We'll have a mic come around when we do that at the end of the session. So, you know, have a think about what the kind of cool questions are. Just a quick note, like this is very much an opinion piece for the people here. I've brought all these good people up on stage to tell you how customers are doing platform engineering. Don't tweet them and say, like, that's the official policy. Like, we can get you in the CEC and we'll do an official policy statement later if you want that. So just everyone's opinions. We want to make that as informal as possible. So, again, just quick contenders to everyone. Start with Chris. Hi. I'm Chris Lyles. I work at Sabre. And, I mean, I guess I would say that I've been doing platform engineering or what I consider to be evolving into platform engineering for about four years. Great. Hi. I'm Leah Rivers. I'm the director of product for software foundations at Google. And I've been doing platform engineering at Google for the three years that I've been there. Hey. Good morning, everyone. I'm Kapil Patil, director of platform engineering at Etsy Healthcare. Been in the platform engineering space for about three years. Awesome. Hi. I'm Tyson Singer. I lead platform, very creatively named, at Spotify, which also includes our platform engineering team. And I've been doing that for about eight years. Okay. And that would be a good start for us as well. Like, I think one of the questions we get a lot is what is platform engineering? Like, what does platform engineering mean to you? And I guess we'll start at the end. We'll come back. So... Yeah. For Spotify, platform engineering is about ensuring that our developers are as productive as possible. And that shows up in how we go about doing that in terms of having a team that is really dedicated towards a specific customer in our organization. And that's...we typically refer to them as the feature teams. And so those folks in our platform engineering teams are really trying to serve our engineers. We've been extending that further beyond just engineers to really all of our R&D and our IT organization as well, not just thinking about engineers, but about product managers and designers and everybody else, data scientists, etc. So platform engineering at HCA is basically reducing cognitive load for our engineers to be able to produce better code, better quality code, and enabling all of this through self-service. Look, we started with shifting left mentality, and now we're looking at shifting down. So basically, what does shifting down mean? Shifting down mean is abstracting all the core capabilities of your tools, governance, standards, into platform engineering, to let engineers spend more time on coding what they like more rather than worrying about all the governance pieces around them. Yeah. That really resonates. I think the way I would say it is platform engineering is the craft and practice, and it's a very socio-technical discipline, of really finding the common problems that engineers face, and solving them in reusable, reliable ways that free our engineering community up to solve bigger, better, and different problems. It's being able to take a good idea in software and scale it up to a successful business as effectively and efficiently as possible by solving for the common problems that have to do with scale. Awesome. Yeah, I think for me it's definitely most of the same points that everyone else has mentioned. I kind of think about where we started before making our transition onto Google and platform engineering. We were running in like the older COE model where everyone needed to be a cloud engineer, everyone needed to understand cloud architecture, and that just doesn't match with the business need to actually deliver our software at scale and be able to make our feature releases for all of our customers. So it's kind of like an evolving change in mentality, and all of the things that everyone mentioned, right, shifting down and getting away from shifting left, having developers, you know, do the same things that other teams can do for them. So that's all the good stuff, right? That sounds great. I'm going to have a little bit of a curveball now, I think, as well. So those are the good things, the topics that worked. But I guess what customers often ask us is, what went wrong? Like, what are the learnings you had in that? So if you were advising someone new today, they're kind of just starting their platform engineering journey, what would be the sort of top thing or top few things that you'd warn them like, hey, we might have made some of these mistakes, but we learned from it, and you can learn from us? So anyone who wants to take that, like, get the curveball? Sure. I'll get started. I have maybe a couple learnings from my journey at Spotify. We started our platform team primarily focused on infrastructure. And infrastructure teams back then, they were pretty focused on building infrastructure, not on developers. And so I think it's a pretty natural place to start your journey. And so we tried to move up the stack as we took advantage of Google Cloud, and it freed us up to do a lot more value-add things towards our developers. But that's a journey for people to shift from sort of working on infrastructure to really focusing on experience. And so it's going from really kind of focused on building your product to being a service-oriented team as well. And so being mindful of that change curve for all of your organization is important. And at Spotify, that meant we needed to put in more product managers into our platform organization. So it was like quite a significant ramp-up of product managers. We increased the number of data scientists in our organization, the number of designers in our organization. And then we rolled out a whole bunch of principles and change management techniques, both towards our customers but also towards ourselves, so that we could drive that. So that's one thing which we kind of learned painfully for, I don't know, the last eight years. I'm still on that journey because I have the infrastructure teams and the DevX teams tightly glued together. The other learning, I think I would say, is start your measurement and your success metrics journey early. It is hard, hard, hard. So get going on that early. I showed up at Spotify. I was like, oh, I'm going to change this approach towards analytics and really understanding and measuring. And we'll be done in a year. Still on that journey. Still going. Still going. And that's, I guess, the sort of digital native side of it. But for the non-digital natives, how does that look? I mean, I think it's kind of the same aspects. Like, you start out with infrastructure, cloud infrastructure, and you work your way up. But maybe you underestimate the change in your operating model. Beyond the changes that we talked about for product management, you also have a new role as the operators of the platform. It is your platform team's responsibility to not leave your users in a ditch, right? You can't just tell them, oh, this is the recommendation from the cloud provider you used to do this. Please go do it. It is now something that you need to maintain that trust and relationship with the rest of your user base. Anything else? I agree. We started infrastructure as code in our journey with platform engineering. So I'll give you one example. When we started with, we were trying to enable all Google services through infrastructure as code. Now, when you think about from application development team's perspective, they have to learn how to stitch each of these services together. So if you're building a microservice architecture, you still need to stitch all of those services together. So we quickly realized that by just enabling infrastructure as code is not going to get us where we want to be. We need to focus on our experience. So can we create these into reference architecture patterns and enable these through self-servicability so that our engineers do not have to learn how to stitch together? Or what are the security measures you need to take when you're communicating from your service to service? What is the best or secure way to communicate? So I think that's one of the key things. And listening to your customer who are your developers and getting their feedback, and measuring how we are doing against what the recommendations and suggestions they are providing. And measuring our overall KPI metrics will really be helpful. Awesome. And those devs get overloaded everywhere. So I know in Google we have a similar conversation. Yeah. So I think the thing that I'd add is that it's hard to underestimate the power of shared understanding. There's a saying, you know, that a problem well defined is a problem half solved, meaning it's already half solved. And in computer science there's wisdom like, I think, premature optimization is the root of all evil. Or, you know, going to binary too soon can be restrictive. Same thing with our golden paths or well-lit paths or, you know, a lot of our platform engineering techniques. We need to look at the full range of options. You know, shifting down and embedding things in our platform is the ultimate goal. Shifting left is actually a necessary step along the way so we can really refine and understand what problems we're solving. And then there's also just all these cultural incentives. You talked about this and, like, you know, the shared responsibility and what we value and how we know what problems we're shooting for. That's, like, the full range of options that we have in platform engineering. And we don't want to go too soon to the technical solution because we can spend a lot of effort, money, you know, time on, you know, solutions that are basically, like, optimizing a little too soon. Right. So we need those social dynamics. Awesome. And I guess those are some of the challenges. You know, I think we're definitely seeing some benefits, though, from customers. And so anyone who's got some headline benefits that you've been able to show, go back to your executives on, like, what would you say, like, the sort of top things, you know, that you're able to show right now in terms of platform engineering benefits? I can start. So back in HCA, we started our cloud journey back in 2022. When we started our cloud journey, we were trying to enable our data scientists to be able to explore data from BigQuery data sets. It used to take anywhere between four to six weeks for somebody to get access to the data, to be able to start looking and start analyzing the data. So we quickly realized that it's a tedious process and it's taking six weeks. And if we want to scale to our enterprise, it's not a scalable option. So what can we do to identify where we have gaps? So we conducted a walk the process on, I still remember the date, 4-20-2022. We had all our leaders in the room talking about, hey, this is what we do. We took painful six hours to figure out what it takes to create a GCP project with a BigQuery, accessing that BigQuery through a Vortex AI notebook. So fast forward six months, we spent time in understanding the overall process and how we can automate all of this. And now we can do that same process in 30 minutes effectively. Big change. Yep. But it took you a long time to get there. It took us six months to building, switching all of that together. You need to think about all the smaller things like, hey, what IAM permission I should provide? What is your service account? What access service account should have? All of that, there are a lot of your manual processes which used to be in place. So we wanted to automate all of that and then even accessing data in a regulated environment is tricky. How do we allow that access and how do we do that in a secure way so that it is rinse and repeat rather than a one-time thing? Awesome. A lot of benefits, folks, that you're seeing today. I'm happy to build on that a little bit. Just in terms of how we think about it, we think about it both from the perspective of task optimization, so improving things within the inner loop and the outer loop. And, Kapel, you just talked about some of those things. And then we also think about it more broadly in terms of basically time saved for engineers and we measure that and try to report on it from a sort of FTE equivalent offset. And for our financially oriented folks, we try to turn that into something we call blue dollars. So blue dollars don't show up on the balance sheet because we offset 400 FTE equivalents by doing our fleet management program, for example. That doesn't save us the equivalent number of 400 salaries, but it creates that additional capacity back into the organization. So we sort of try to look at it from both of those perspectives. The other thing that we also really look at is how does it impact our security stance as a company? Because a lot of the things that we do through our platform engineering efforts reduce enough toil that then we can attack and remove security vulnerabilities from the overall ecosystem at a rate that is so much faster. And just generally we've also seen the rate of migrations and upgrades of our software just explode. And that was one of our success metrics when we kicked off some of our programs. And those are blue dollars, but they're still real money because I know like sweet hours are a very similar thing, aren't they, like within Google? Sure. And I think one of the most straightforward measures that we have and like a lot of like the context here, a lot of this is not straightforward measures like platform engineering needs feature development and innovation to actually land that value for customers. So when we talk about, you know, the signals of success is in that context of it's actually hard to measure and to get those measures right. So one of the most straightforward ones I think we have is the hardware resource efficiency savings that we're able to get. For example, how much more work are we able to run on the same amount of hardware? So one. I'm sure you've seen something similar. Oh, definitely. I mean, I think the consistency and speed aspects of what everyone else has mentioned is what definitely helped us with our large migration out of the on-premise data center. So it's not a, that's definitely something that's measurable. And we would not have been able to perform those actions without things like self-service portals for our users to get ready for their migrations and be able to do all of the similar things that we've talked about already. Let me just add one thing on the sort of hard financial aspect of platform engineering. So part of our journey and platform engineering has been to defragment our technology ecosystem. Spotify, I think is famously known for being like very autonomous squads and everybody does their own thing. That became a problem as we scaled up. We really needed to get people more aligned on a set of golden paths, golden technology and things like that. And we as a company optimized for speed primarily as we got going, which means we didn't optimize for cost savings. So as we built out our platform for that primarily around backstage, we got folks using that on the line to that. And then when we wanted to do cost saving activities, we had all of our engineers going into a single space to understand their workflows. Oh, this is where I go to understand the quality of my software through our sound check plugin in backstage. This is where I go to understand my security vulnerabilities. And then same sort of playing a glass there. This is what I need to do to optimize cost of my cloud spent. And then, oh, look, there's a button I can literally press and it will take care of it. And it will address some of these things. So it became a good platform to later for us drive actual cost savings, which became very material to our company's success. So that's one of those things that build over time with a platform engineering mindset. But it wasn't maybe the thing we had in mind when we did all the work. But it was one of those side effects of actually having a lot of discipline in your platform engineering approach. And we've all been conditioned, I think, to go with that sort of move fast and break things initially. Like, we've all got that in the industry. But I guess what we're trying to sort of work out here is how do we balance the cost, the speed, like all of those things? Any hints and tips, folks, on how to do that balancing? Like, is it okay to move fast and break things? I don't think that's where we are today, right? So how are we moving fast but doing it well? Any tips and tricks on that? Well, I was hoping we'd hear from Google on that one. Yeah. Okay. Well, I'm happy to start. So there's two key insights. Like, I love how the example you just gave and the example you shared earlier were very much about shared understanding. And in that vein, two insights that really help us here are, one, to focus on quality attributes or nonfunctional requirements like security, reliability, and try to articulate the business need, business driver, business risk associated with those. And I think that's one thing. And I think that's one thing. And I think that's really important. I think that's one thing that we're going to do. And I think that's one thing. And I think that's one thing that's one thing that we have a strong influence over, you know, in our platform engineering practices. So if we can look at what quality attributes matter the most, how important are they? How much do we need to influence them? And then we can use our architectures to influence privacy, cost, you know, like multiple constellations of quality attributes that are really important. And focusing on that as a primary driver of where is going to be the most business value to shift down helps us to maintain that quality point of view and know maybe like what things are totally unacceptable to break, to use the language you're talking about, and where we have some flexibility. So that shared understanding and quality attributes and how architecture influences those has been very powerful. I know you have mission critical services. You have the same concern, right? Yeah, I mean, I think that was definitely a good way to look at it. I'm definitely all for learning by breaking and going fast. And I think knowing which ones to break and which ones not to break are very important. When we're looking at specific technical problems, it's pretty easy to understand, like you mentioned, what is acceptable and not. But those other non-technical aspects of the challenge are definitely harder to articulate to our users what we would expect when we're rolling it out. Yeah. I think just to build on my previous answer a little bit, like as you're going through your journey of platform engineering, I think you are managing this sort of you're going to have to select on what you optimize. But let's say the end state is that we no longer have to do that. Once you've gone through and matured, then you can have good, fast, and cheap because you've aligned your engineering on a smaller set of technology footprint. It's easier to manage. You've reduced the cost because you've removed a lot of the cost of software and cognitive load for your engineers. And then that can basically translate to cheap as well. So, like, as you go along that journey, you're removing those tradeoffs day by day by day through the beauty of what you're doing. I agree with that. It's basically a maturity of your platform engineering team. As you keep maturing, you will reduce those risks. Fast moving doesn't mean that you're breaking things and trying to deliver something which is insecure. So, you've got to have still, you need to have guardrails put in place. That's your core capability of your platform. Once you have those core capabilities taken care of, as you start maturing, as you start producing these reference patterns or golden paths, that will help us move faster and more cheaper. So, you don't need to invest too much time or you don't need to negotiate between, hey, do I need to move fast or do I need to move cheap? So, it sounds like you can have it all. This is great news. But you've got to put the work in up front. I think that's the bit we're saying. You've got to put that work in up front. I think one of the pieces we had from our, we did a research study last year, was that with platform engineering also comes an increase in employee satisfaction. Like, we've seen developers, you know, when we initially said we're taking away some of your tools, right, and we were actually, you know, enforcing some guardrails, we thought that would be bad. We saw an uptick in, you know, developer satisfaction. Is that what you see with your teams? I mean, I think it's not only limited to developers, right? The platform team itself has to eat their own dog food. They become satisfied and happy with the things that they're building. They can use it themselves. They can evangelize it throughout the rest of the environment. They can get the developers happy and not worrying about, you know, the underlying infrastructure or cloud components. I think that it puts everyone in a situation where they can focus on harder challenges and build it upon those consistency items that we have in the platform. What do developers like the most? They like developing. So if we can provide that opportunity to innovate and abstract all the tooling and technology components or configurations outside them and then let platform engineering team handle that and let them focus on innovating. So happy developer produces better quality code and better quality product. So we had a saying when we were releasing backstage, which is happy developers make happy code. So that was sort of our flippant way of saying that. But it really does undermine something that's quite important. One, you should measure your developer satisfaction. I think Google's done some nice studies that show that the subjective view of developers does indeed correlate with their objective output. So it's a very useful signal to do. And I would say, you know, don't just do it so that you can see that. Measure developer satisfaction across the suite of your platform engineering tools so you know which ones need to be improved. And that's what we do. And it's a huge signal for my organization in terms of what our product managers understand and how we prioritize and how we invest across our portfolio of, you know, quite a lot of capabilities and informs that and creates just a positive flywheel. So you can keep on driving that up. And, you know, it doesn't always go up. Sometimes it goes down. You do things. The ecosystem changes. Expectations change. So it's kind of this constant like, oh, we did something. It got better. Oh, people got used to it. Satisfaction goes down. And you're just always on this journey. But you need to sort of understand that. I know that's the same internally as well, right? Yeah. I mean, I think that's a great point. Like, ecosystems don't stand still. If you're growing and you're being successful, your ecosystem is going to be continually changing. And that means you're going to, like, as soon as you eliminate, you know, one class, like, of problems that developers need to solve, that's great. There's another class to solve. There's another class to solve. And so, you know, we have a lot of instrumentation and surveys to really understand how developers are feeling and what the sentiment is. And I think that having that foundation of trust is so important because we need to keep getting better at closing the feedback loop. Because if our products are successful, if our developers are successful, it's going to be, like, a process of discovering new pain points and, you know, new potential challenges and then finding, you know, opportunities, as you were talking about, to shift down. And so we work with that friction. That's something you really have an entire team within Core doing that just internally. Yeah. Right? And I think, you know, that's a really good example of how just listening to your internal customers, we've seen that be a big thing research-wise in terms of improving that experience. I'd just like to go back and touch on, I think you mentioned developer portals briefly. Yep. And, you know, I know Backstage is quite popular sort of in the industry. But, you know, I think a lot of customers are like, where does that fit in, like, where did portals fit into my platform engineering, you know, journey? Any sort of hints and tips from folks? And I guess I'll start with you. Fair enough to start. If folks aren't aware, Spotify open sourced what I would say was sort of the most successful, visible developer portal about five years ago. It was called Backstage. And it sort of defined the category. Today, we see that as people are trying to figure out how to build their own developer portal or, you know, not necessarily build, but, you know, introduce one into their ecosystem, 98 or 89% choose to do that with Backstage versus some of the commercial ecosystems. So it's clearly the sort of category leader and winner. And that's because we have it literally at the center of our development ecosystem. And a lot of the lessons that we learned through our long journey of platform engineering are manifest inside of Backstage. So, you know, those lessons are around how do you reduce cognitive load for developers. You know, there is so much complexity in our tech ecosystem. And so if you can put that in front of developers in a way that is more consistent, more abstracted, because a lot of platform engineering is about abstracting away a lot of complexity, then you get a lot of benefits from sort of that general approach. I'm sure I have lots of other things to say, but I'll pause. We use Backstage. We use Backstage. We're Backstage customers. So we built our internal developer platform on top of Backstage. So we customized according to HCA needs, HCA specifications. So we added our own governance layer on top of it. We democratize our platform so that all other teams or all other developers can come and contribute to building templates, building repeatable patterns, repeatable architecture, so that it is rinse and repeat for our teams. At the same time, we want to make sure that we have the right level of governance put in place so that any time you're building a template, it follows the right governance, what you put in place, so that we're not deviating from the standard, from tooling and technology perspective. The internal developer platform really helps putting, stitching all of these things together and making it available for our engineering community. Just to build on that, because I think it's a great point. When we built Backstage, we built it with this plug-in concept that you can build additions to the ecosystem. And that was a really great way to engage the rest of the engineering organization in making their own lives better. So it wasn't just my relatively small Backstage team doing all the work. It was all of the engineers who were like, I have a problem. How do I solve that? Oh, I'm going to solve it this way. I'm going to put it into a plug-in. Great. The rest of the organization has benefited from that. So at Spotify, that resulted in hundreds of these plug-ins. And now, in the open source ecosystem, it's resulted in 200 plus open source plug-ins as well. So it's created, like that same pattern has played out on top of the open source platform as well, which just continues to make it a really positive flywheel for people who are doing platform engineering. And you were saying it's not just your team that does the, like the platform team that does the plug-ins then. You're getting some of your customer teams internally. So we do our plug-ins on our own. And then we let our engineering teams to write their own reference patterns. So if you're building a specific microservice architecture, they have specific, let's say, services they want to consume. They can build their own reference pattern and publish it to a developer portal. Other teams can, if it matches their pattern, what they're looking, it's available for them in place. They can directly consume it. They don't need to rebuild or rethink about it. Interesting. Samela, Samofi? Yeah, I mean, you said portals. So maybe there's more than one in some places, maybe more than one implementation. We don't use Backstage primarily. So we're in, I guess, 2% of people who are not using it. But we do have it for some things, but not for the main portion of our infrastructure platform. And we do a lot of similar items, right, making sure that there's patterns and consumable items from, you know, like the private module registry and things with Terraform so that teams can reuse. One of the things that's interesting about the portals, though, is that we also see use cases outside of portal where teams also want to have API-first access for more complex workflows. So it's kind of a mix. I think the portal, like, that means a lot of different things inside Google as well, doesn't it? Like, cloud is at the top. That's what people see on the outside. But inside, there's no one portal, right? Yeah. Yeah. And I think this space lends itself really well to an ecosystem and open collaboration across, you know, folks like us here and the broader community. Because the portal becomes sort of the face of, like, the portal to the infrastructure, in a sense. And across clouds and, you know, just building on the cloud in general, there's like these three fundamental challenges to successful adoption and accelerating innovation using cloud infrastructure. And, you know, I've been working on these since 2012 or so now. And they just get harder. What resources do I use? How do I safely and effectively combine them? And how do I estimate cost? The more capabilities we have on the platform engineering side and the more options, the more a portal and the problems that a portal solves become so helpful. So, you have to keep keeping up with the rate of innovation that's going on. Just the tip of the iceberg. Yeah. I think just the topic that did come up here as well is, you know, how do you decide when to sort of buy or build or use open source components for your various platforms? I think no one seems to, like, really do all of one thing. Everyone seems to sort of mix and match. What are those sort of decision thoughts for you? I think it's definitely a mix and match. And it's the right tool for the right challenge at the right time. And maybe you should reevaluate as time goes on. And maybe that reevaluation becomes hard as time goes on. So open source components, things like backstage are great. If you can go through the process of integrating it, if you're in a green field, great. If you're not, you have to be very careful. You want to make sure that you're not going to, you know, fail. And one of those things that would not be acceptable would cost a lot of dollars, right? Yeah. Yeah. I mean, I think that's a fair perspective. One of the things that we've done in the last few years is try to distill a lot of those learnings we had and make a commercial product, a set of commercial products available for folks as well as an IDP. So most recently we launched our portal product, which is Spotify's portal for backstage, which is a hosted version of backstage and is there to address some of the complexities that you mentioned, which is when you take the open source version, it can take you a little bit of time to get that set up. So having a partner who has experience doing that and takes on some of the management aspects of it can be useful for many types of enterprises, not everyone. Like, I don't think that's the right route for every enterprise, but for a lot that is a big accelerator and a good way to sort of save cost of the people to manage that ecosystem. So we have support for that. And then we also have commercial plugins that go on top of that for some of the things which we think add extra value to sort of help with the range of options, which is some people want to buy, some people want to build on top of open source, and then, of course, there's the smaller set of folks who have the context where they, like, just need to do it themselves. Buy versus build. What's the course? It's always going to be a mix and match. I don't think there is a straight answer. A, you need to build versus buy, depending on your use case, depending on what you're trying to solve. So if you're trying to solve a technology problem, you may have a solution with open source, or you may have a solution which is available in the market. But at the end of the day, if you're operating in a regulated environment, you may have to get something or you may have to build from scratch some of the things so that you ensure that your regulatory requirements are met. And again, depending on what workshop you are, do you have capacity on your application development teams to start building products from scratch? Or do you want to go buy something and look for a SaaS offering so that you don't need to manage, maintain support, care, and feed? So I think, again, depending on which environment you are, depending on what your requirements are, it varies. So I'm just cognizant of time as well. And I know we wanted to give some time for the audience if there are questions. But we'll talk all day about this. I hope you can see that we're all quite passionate about these topics. And I'll actually, I'll post in a bit. There's a meetup later if people do want to talk about this further. You know, come continue those conversations. But just want to open it up to the audience if there are questions. I think we have a mic. So if anyone's got something they want to ask, now is your chance. I think we've got one over here. Or just shout it really loud. All right. So a notorious problem is basically trying to get management buy-in for investing and building out platforms. Do you have any, like, what's your tangible thing you can point to and say, is it money to help our business in the business? Okay. So management buy-in for investing in platforms. What's that number one thing you go to your executives and talk about? I'll put Leah on the spot because we have to have this conversation as well. All right. It's not free. This is where I go to quality attributes pretty quickly. Find the security challenge or the efficiency challenge that matters most. Oh, there it goes. There's the mic. There's the mic. So starting with, you know, and cost controls or velocity, find that quality attribute that is most vital as a scaling point for growth or a risk to impeding growth. And see what you can leverage there. But it's going to be different per business. It's going to be different for your culture and your management. But finding that quality attribute risk and then showing what you can do from a platform point of view there. And maybe adding on that point that you don't have to trade them off, but you kind of lead with the most influential one for your business. Yeah. Other tips and tricks? I think it's looking at both qualitative as well as quantitative matrix. So if you are in the platform engineering space, if you can look at Dota metrics to understand, hey, where do you guys stand today? If we do the platform engineering, how can we improve? We can go back and show, hey, this is where the value is. And looking at the qualitative metrics, looking at security, what is the code quality you're producing today? How many bucks are being released to a higher environment? Can we cut that down? What are the additional pieces you can bring in to help with your overall case of platform engineering? What other things you could help? I think you mentioned earlier, you had a number, right? You had weeks to get the service bill, and you got that down to like less than an hour, right? Yep. I mean, I'd go back to my boss with that. Absolutely. Since we do have a commercial offering, we love to talk with folks who have this problem, and we have a number of reference customers as well who have had this exact same problem. So my short answer is come talk with us. Reach out. No, we'd love to talk with you to help you, to Leah's point, understand your context and the way to answer it in your context, because there simply is not one answer. It may be that what matters to your business is how do I reduce my infrastructure spend. It may be security issues. It may be feature development speed. It may be onboarding time. All of those things, Spotify can share our experiences and we can share customers' experiences as well, and sort of how to frame that upwards towards executives. So, yeah, reach out. Any last thoughts? I mean, I think I would just say it's the same aspects of building on that consistency to unlock all these other attributes, and it would definitely be different depending on what is important for your business. So there is a number. We're all agreed on that. We've just got to find out what it is for each use case. Other questions? Please. Hi. Thank you for this panel. It's interesting. I have a question around the responsibilities of like a product ownership perspective of the platform engineering team. Are those responsibilities something that you push onto engineers, or do you have like a separate role to like manage the features and planning for the platform? So I have a product manager here, so maybe we'll start. I guess one thing we haven't really talked about today is with platform engineering, you create great economies of scale through shared fate, basically, using something once. shared fate requires shared responsibility, because with shared fate you have the risk of tragedy of the commons. And depending how much you are accomplishing in your platform, how many problems you've eliminated for developers, how much you've shifted down, that's going to influence what type of responsibility a developer has to achieve quality attributes overall? So I guess the answer is it depends. It depends on how much shared fate you have is like a good way to look at it. And the less shared fate that you have at the platform, the more you need to look at even just practical mechanisms that help with those problems of understanding what the operational readiness requirements are to launch something. Checklists can help. You know, even practical things like that. So you don't always have to solve something deep in the platform and in the portal until you've really understood the problem and you're solving the right problem. So it varies, but you can look at the shared responsibility and shared fate as a guide for how you best support developers, and don't push too much onto them if you don't have to. Definitely, I think research-wise, we've definitely found that having a product manager, that's just the first step as well. Like just having one, I think, is useful. And I think you folks have probably experienced that as well. So in HCA, we do have product owner for platform engineering, which is focused on purely what are the capabilities we need to enable on the platform itself, and what are the things we have learned from our engineering community, what are the features they are looking for, what are the things we are struggling, so that we understand, we listen to our customers and cater our customers. So having a product manager really helps that. I absolutely agree. Having product management in this space is super important, but there's another aspect, which is making sure that all of the engineers in the organization can also see the same data. So part of the value, going back to the IDP question, is about being able to visualize the state of the ecosystem for folks. So Soundcheck is one of our plugins that allows people to easily visualize their own context instead of having somebody from the platform engineering team come and tell them what to do. It's like, no, this is what matters to my context. And it will differ across your organization. And so if it's customizable and they can sort of see what it is, then that also helps with sort of driving behavior change beyond what a single product manager can actually do sort of just through the product alone. I think you definitely want a good product team to help assist with your journey. And it's a shared fate across all of the engineers and architects that are involved with your platform engineering. I'm sure that the feature you're talking about that allows team members to gain that aspect was definitely contributed and provided from the product team as well. So it's like, you know, trying to do more with less and not having to always funnel through an aspect is definitely something that is going to be useful. All right. So I know there's going to be more questions. We are rapidly running out of time, though. The good news, and if I can just get the slides moved on, I think, to the meetup session. So we've got more time. Not now. But come join us. This will be 11 o'clock in the expo hall. Have a load of cleaning sessions for 2.07. And if you want to come talk more about platform engineering, I'm going to try and get some of these folks to come with us. My team will be there. So if you want to talk more about platform engineering, come to the meetup. And there's plenty more topics to cover. I think there's plenty more questions to cover. A huge thank you to the panelists here. I know that this is a super hot topic for all of you, but, like, it's still a big ask coming up. And so thank you very much. Really appreciate it. Come to the meetup. Please put the feedback in your forms. And have a great day. Have a great conference. Thanks, all. And have a great day. Have a great conference. Thanks, all. You can join the team. Thank you.