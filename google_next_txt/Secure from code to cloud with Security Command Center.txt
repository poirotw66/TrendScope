 Hello, my name is Mansi Bakshi. I'm a Product Manager at Google. Today we are announcing Gemini Remediation Recommender. This innovative tool streamlines and automates the remediation process for security alerts. Let's take a look at the current security alert management process. As a first step, the security team receives a large volume of alerts, which they then have to prioritize to figure out which findings need to be addressed first. Next, they need to assign owners to figure out who fixes which finding. Now with most deployments becoming IEC-based deployments, the owners of remediation has shifted to the DevOps teams. There's a lot of collaboration to and fro, back and forth between the security admins and the DevOps teams. Next, the security team needs to collaborate with the dev team to provide them enough context. The dev team understands the context and then the dev team has to make the actual code change in their IEC code such as Terraform to fix this finding. There are multiple pain points across this process for both the teams, security admins as well as the DevOps teams. Enter Gemini Remediation Recommender. It's a semi-autonomous security remediation process. What does it do? Well, it creates a pull request containing the exact code change required in your IEC code repos. Next, it adds security context and information for the DevOps teams so that they can make a fully informed choice. How does it do this? As a first step, Gemini Remediation Recommender. Next, it figures out the exact code change that is required to remediate the finding. Next, it adds security context and information for the DevOps teams so that they can make a fully informed choice. And finally, it sends the pull request to the right owner. With Gemini Remediation Recommender, we are shifting remediation to the left by mapping runtime issues back into the IEC code where it originated. To summarize, Gemini Remediation Recommender reduces the burden on SEC admins because they do not have to worry about disruption, figure out the ownership, and provide security context to the dev teams. Next, it empowers the dev teams. They do not need to figure out where to fix and what to fix. And finally, it fixes the problem at the root, which is the most important one. As it reduces the chances of recurrence of the same type of issue. Let's dive into the demo. Here we are looking at our findings funnel. It shows there are 4,000 plus findings out of which 400 have a fix available. Now we are looking at the findings inventory. As you see, we have all of these findings with a code fix available. On the left, there are a few new filters that allow you to filter findings based on the availability of a fix. Now, just for your knowledge, the private preview launch we are doing addresses all types of identity findings and in addition to that, open firewall finding as well. Let's go inside the finding detail of this one identity finding. As you see here, there's a generate PR and send for review button. As we click on that, there's a pull request that is enqueued for creation. And it takes a couple of minutes for the pull request to get created. Once that is done and we refresh, we see that all the pull request details are now populated here. With the right owner, the pull request link and the PR generation time. At this point, the security admin can navigate to the details section to view the security context that would be shared with the dev teams. And they can also view the code diff that shows them what is the code change that is proposed as part of the pull request. Now let's go inside GitHub to see the actual pull request. As you can see, the title of this pull request contains enough information for a dev developer to prioritize this particular pull request to be reviewed. It says it's Gemini generated. It says it's from SCC. It mentions the remediation for finding particular ID, the category of this finding, and the severity as well. It also has enough description and explanation as part of the PR description. It talks about how this pull request is not going to disrupt your environment. We send enough impact analysis for all our identity findings, such as a particular role was not in use for the last 90 days and hence accepting this pull request does not break your environment. Now to the code change. This is what the user reviews. Thank you. Thank you.