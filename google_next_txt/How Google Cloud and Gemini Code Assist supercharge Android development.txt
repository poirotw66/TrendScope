 Hello, everyone. Can everyone hear me? Okay. Thank you all so much for being with us here today. Okay, great. Just let the last set of folks come in. And let them get seated, and then I'll start. Okay, we'll start again. Hello, everyone. Hi. Thank you for being here with us today. Today, we are celebrating success, the success our customer has had in partnering with us. So we will take you on a journey from... We will take you on a journey with us as we talk through how working with Renault, the partner in this case, and the partnership we've had with them, has led to success, the success of which we're sharing with you today. So my name is Femi Akinde. I am product owner for Cloud Shell and Cloud Workstations, and I own the solution, or my product is the solution at the heart of this acceleration we'll be talking through today. So... I want to take you through a couple of things before we start. The first thing is we will start with the customer. We'll place the customer at the heart of this discussion. We'll have a customer help us set context on what the challenges were, what their goal was, and why they partnered with Google Cloud. And then I will give you a brief overview of a solution in question, and then my colleague will walk you through the journey, the journey we went through with the customer to arrive at a point where their goals were met. So there will be... This will be a highly interactive discussion between myself, the customer, and my colleague who worked hand-in-hand with the customer when we did this. So please hold your questions till the very end. We will try as much as possible to walk through everything you will need to hear so that at the very end, you'll be free to ask us questions about how this will apply to you. By show of hands, how many here work or develop Android systems? Okay, great. So this will be very helpful to you. Okay. As a product owner, I am super, super happy to welcome the very first person that will join me on stage today. He is the Chief Software Officer of the Renault and Ampere Group. Ladies and gentlemen, please give a warm round of applause to Henry Bozay, the Chief Software Officer of the Renault and Ampere Group. Thank you. Thank you. Thank you. Thank you. I think we should do more than that. So I'll give you a bit of context. Henry flew in last night, international flight, to make this happen. Like I said, as a product owner, it gladdens my heart. So I want you to please show him that we are all appreciative by giving him a louder applause. It's a pleasure. It's a pleasure. Thank you all so much. Thank you for me. Thank you. It's my pleasure. Yes. Can you please take a seat? Sure. But before, I wanted to do something, you know, you guys remember Steve Ballmer, right? Developers. I always wanted to do that. So, again, this is a story of partnership, collaboration, which led to innovation, which led to the success story we'll be sharing with you today. So instrumental to that are quite a large number of teams and people. So we on this stage are just a small representation of that. So I will be name-checking other groups as we go along. But for now, someone who was key to this is standing right there. I'd like to welcome him to the stage. He's my colleague, Guillaume Morini. And he also flew in on an international flight. Thank you. Thank you so much. Thank you all very much for clapping. Ah, like I said before, I will be name-checking folks as we go along. So the folks that aren't here. So one person that isn't here, but worked hand-in-hand with us for over a year in getting to this point is Jérôme Couture. And also, the slides you will see here today is actually, like I said, this is a success story. And the story being told through the slides were put together and assembled by Jérôme and his team. They work for Henry, obviously. So a round of applause for Jérôme as well. Name-check of another group that's not here is the engineering side of the house for Cloud Workstations and Cloud Shell. They are hopefully watching us on livestream right now. So I'd be remiss if I didn't point out that they are the folks that really make this happen. And I also want to name-check my colleague on the engineering side, Rob Spies. So round of applause for them as well. Okay, now no more applause. I apologize for making you do work. Okay, so we're about ready to start. So to start us off, again, this is all about the customer. We're highly customer-centric. So I'll cede the floor to the gentleman who flew all the way from Europe. And I'll cede the floor to him so he can walk us through the customer, tell you a bit more about Renew and Ampere, and also tell you what their goal was and how they came to us, what their challenges were, and how together we worked to help them achieve that goal. So ladies and gentlemen, again, I give you Henry Brzei. All right. Thank you so much. So for me, it's actually not a bad investment in time because this is my home and Europe has become my home too. So I have two homes. I'm lucky in many ways. So our partnership with Google extends on so many fronts. Obviously, on the cloud side, as was mentioned by Fimi, we've done some phenomenal, phenomenal things together to help us in our development of the software-defined vehicle. and we'll talk about that a little more in a bit. There's also, it would be remiss if I don't really mention also our other partnerships with Google, as we are together building the first car OS, think of it as the middleware layer, between Renault Group, Ampere, and Google to bring to the market next year. So this is something not widely known, but I think it's an important fact that needs to be also mentioned here. And the third dimension, at least from an engineering perspective, is related to we're one of the customers of gas, Google Automotive Services. So we have quite a bit the relationship with Google on many, many fronts. Fantastic partner in many aspects, and they don't use their size as a huge company to say, you know, we don't have time for you, and I find Google to be one of the few partners that we have that really invests truly and generally in working together towards a common goal. And I really mention that from the bottom of my heart. So this is really a kudos to the Google team. So before we get started, how many of you know about Renault? I know, so a lot of you, right? So I know back in the day, Renault attempted an entry into this market, and so that's history, but you never know. It may happen again. And I joined the company in November of 2023. It was at the founding of Ampere. I'm sure Ampere is something relatively new to you. How many people know about Ampere? Not many, which is expected, but let me explain. So the basic idea of Ampere is really take software and ratification engineering into one place, and that place is Ampere. So think of it as the entity that provides the software and systems for the group, and the group has many brands. There's a Renault brand, there's a Dacia brand, so it's quite diverse in terms of what it can do. And we are the team, me and my team are the ones who really provide that capability to these brands. So that's one dimension. The other dimension is the electrification. So all our electric vehicles, and we've launched quite a few already, are coming from this entity that is called Ampere. So you get the basic essence of why we have this company. And think of it as an attempt to, within the mothership of Renault Group to create this new way of thinking, reflecting the market trends, as well as bringing into the company a change agent in terms of agility and the way of working and developing vehicles for the future. So that's the basic concept of Ampere. It's a year and a half now in the making, and many launches of vehicles later. we as a team, we work on all the vehicles that we have, not just the electric vehicles. But our big project of record is software-defined vehicle SDV. And today, the software-defined vehicle project is slated to launch in April of 2026, which is, for the Western world, is quite the accomplishment because I know the Chinese are definitely on that track already. But for Europe, for the U.S., I would say, boldly maybe, that April 2026 is one of the early dates for launching a fully centralized architecture, service-oriented architecture, software-defined vehicle. And Google's playing a big role in this, as I mentioned. So, why do we do SDV? I think this is a really big question that often I'm hit with that question. What is the point? And if we know, and we know, vehicles traditionally have always had these traditional monolithic architectures in which software and hardware is essentially limited by the ECUs that are part of that architecture. Okay? And if you think about the feature content of today and technology requirements, it's exploding. The whole immersive experience, the whole notion of ADAS and all these different features are coming. We find ourselves in a position one more ECU is being added and it's really busting at the seams. So, traditional architectures, one more ECU on the CAM bus is not going to really be scaling. and hence this movement into this centralized architecture with the service orientation in which you can use microservices to bundle, make, create new features throughout the life cycle of the vehicle is the bold reason why we took the investment and it was a huge investment from a CapEx perspective at least to invest and build the software platform for the software-defined vehicle in Europe. The first one, I may say. So, where are we on the journey? We're literally about a year away. We're in the heart of this development. In September, we have the pencils down when we finish essentially our baseline software development and after that, we're into the verification and validation stage. But why I'm telling you all this story is because the role that Google has played in this journey. I think that's a key, key message. As you know, when you are developing complex systems and in many cases for the first time because a lot of us are really not just reusing, we are entering into a new space with HPC, with these zonal computes and as well as the software architecture that is distributed with features is a quite new thing for the industry beyond the domain-based architecture. architecture. And with that, you need the tools. You need the tools. And this is where Google shines. At the heart of it is AI. And when we talk about code generation, instantiation of things that you need to be running immediately versus waiting for the thing to compile and having it be available to the developer or to the validator. And so from code generation, test case generation, validation, we are using a variety of the Google tools to help us with our day-to-day life and making our life much simpler to have the assistance and the help of Google along the way to make our engineers more efficient so we can do more with less time because we are challenged with time. Time is very precious for us and we have a very ambitious plan to launch this product in April and Google is playing a huge role on so many fronts to help us with that journey. So I'll be explaining more along the way because this is interactive as you mentioned, I mean. So with that, maybe I'll turn it over to you. Yes. So like Henry rightly said, their goal was software defined vehicle. There's a team within Google they partnered with. But these were the challenges they faced in trying to deliver on that goal. They wanted, they're going to be building IP. They wanted their IP to be safe and secure. So syncing it onto local machines was not an option for them. So they were looking for how do we do, we're going to have, we have a global distribution of developers. They're all over the world. How do we secure IP as everyone is contributing to this? So that was one. So definitely that was paramount in their mind. They also wanted testing to be something that was a lot easier because with automotive development it's so tied to physical hardware which makes it more cost prohibitive for them. So they wanted some virtualization. Virtualized means to test. So that was a key part of them. They wanted to reduce complexity as much as possible in doing so. Wanted to make this a faster go-to-market with a cost-effective solution. And so that was key to them as they were seeking to deliver on the go. They wanted to eliminate those challenges. So the solution so as I said earlier at the heart of the solution is cloud workstations. Effectively it's our managed development environment that Google provisions within your virtual private cloud. What that means is it's in your security perimeter so it's inherently secure. We specify the development environment configurations for cloud workstation using in this case it was a custom docker image that we helped Renault build. And so this was at the heart of the solution itself. We fully customizable we make sure that your tool chain is fully customizable with this. It's a consistent environment across the team. And in Renault's instance where they have a geographically diverse team placed all across the globe it was important that they be able to access the environment anytime, anywhere with something as simple as a browser. So those were key things for them. They looked at Android development as a whole. They recognized how long it took what a typical Android platform development cycle was and they looked to us to help solve that problem. So I'll pass the clicker over to my colleague right now and he will speak to how this was adapted, how this solution was adapted over the course of a year to address all these problems the customer wanted to address. we want to be very agile for the developers but also on the project by itself when we set up to be able to experiment quickly on the tools. So the first step was really to build a minimal viable product which was integrated inside Renault environment. So we deployed the Cloud War Station as it is without so much customization so mainly a container image as Femi said will attach a persistent disk and be able to connect through the browser to this environment. But this was not enough for sure. What we want to achieve is give time for the developers and when we do the first step on the previous architecture it took three hours and a half to be able to synchronize the code and to build from scratch the first image of Android. So it was not acceptable for a developer to wait for such a long time. So what we did is working in partnership with Renault and the engineering team on Google Cloud Workstation we developed a feature which allows to start not from scratch but with a snapshot which was taken the night before which already contained the code and also the first build of this environment and so when the developer arrived and kick started his workstation at the morning it only took him three minutes to have a full build of his new image. So I want to point out here like I said this is going to be an interactive discussion so I want to point out I'll point something out then ask Henry about it so as you can see on your screen it says three and a half hours reduced to three minutes. When we started this discussion I said this was an Android development productivity solution. So my question to Henry is how did you feel when this was reported up to you that they've shrunk the build and sync times from three and a half hours to three minutes? Well my first reaction why can it be three seconds? No just kidding but amazing amazing the scale from three hours to three minutes and for us it sounds like the order of magnitude is it's large even by by by looking at the numbers but it means the world to us because the developer is such a rare commodity right and it's not an infinite how should I say availability and so we're trying to given the time constraint we have is to find the most efficient way to have our developers our coders our software engineers be focused on throughput and velocity and not be waiting three and a half hours in order to have an instant in place and running and so from my perspective one of the big things I wanted to also mention is we're a global team and within this global team we have engineers all over the world in Asia and India and in Europe and in Tunis so we're quite diverse in terms of where we go for our software engineering work and imagine this global team having an ability to synchronize and be able to use these tools is essential as you mentioned as well as being able to while perhaps France is in a different time zone than India or any other place there is this notion of continuous development continuous work that is going to help us reach our destination it's a key point because again the delay or thinking about stretching things or accepting a post commitment date is not something that is acceptable to us so we are pushing all cylinders with our partners with our teams to find the most efficient way to get there and using the global teams and using the Google technology and the Google tools has been a big enabler for us so it's fantastic but what can it be three seconds? For those checking in that's 99% reduction in time. Yes, yes. So I just wanted to make that point clear. Back to you Diablo. Yeah, now we have a solution which is performant but this is still unacceptable for Renault because it's not secure enough yet and we need to validate the security of this solution also because there is some IP as we said and we want to be sure it will run and stay. in a secure environment. So we add one step on our journey and on the left first we remove the capability to download or upload the code from the laptop to the development environment. Then we also work on the network environment to secure the connectivity to the outside world so restrict the access to internet to be able to only access Renault tooling for the developers like GitLab, like Jira, like Artifactory and so on. And finally we remove the studio access so the developer cannot escalate outside of the development environment. So this allows us to really pass the security validation from Renault quite easily because we not only work on the outside world, the network connectivity, but also what the developer is doing inside the workstation. Finally we just need to adapt a little bit because on top of the development we also have the capability to test and for testing Android environment we use an emulator called Cuttlefish that need to open some ports to access the environment. So we restrict the list on ports that are allowed on the workstation to include this Cuttlefish port environment. environment. So if we try to summarize at the same time to understand what was done before, in the first day of testing of Android inside Renault, what they did for the early adopters was really to deploy a physical workstation under the desk of every developer to have a powerful machine be able to download the code and build the code quite easily. So you need to set up this machine, you need to configure it, you need to deploy, to troubleshoot it when it is not working, and also to update each time there is a new version of Android or of one of the development toolkits. So Renault internally did an estimation of the time it needs to onboard a new developer using this setup. It was two to six days of the support team working with the developer to be able to do that. What we achieved with Cloud Workstation is instead having a number of months which is always on available when the developer wants to access it, be able to authenticate using the same kind of mechanism that he's using today on his laptop. So it's a physical token that is plugged in the USB socket and now he's able to authenticate using his password but also the token to ensure it is the right developer. He will have access to an environment where the template is already configured. and this environment is already instantiated with some AI capabilities of Gemini Code Assist to ensure that the developer makes the maximum usage of his time and reduce the time to introduce new features. So we estimate to 15 minutes in the self-service mode instead of two to six days using support. So again, I have to interject there because that's a point we want to really emphasize that they went from a two to six day onboarding process to a 15 minute onboarding process. By my math, that's 99.5 to 99.8% reduction in time. So again, this is all about the customer. So I'd like to know, again from Henry, how did the report of a 99.5 to 99.8% reduction in time? How did that feel? And I would love 150% of course. I have to always push the envelope. But no, honestly speaking, this is really a fantastic way of working, right? Because it's not about accepting the status quo, but continuously push the envelope, continuously improve, and there's fresh ideas from both sides. So to me, I see this as a best practice in terms of a lot of the lessons learned along this journey so far, and we continue to push the envelope in which we can start to really make this operational for all the things we do in the future, in terms of future projects, in terms of this project, and I'm sure you guys will take this and apply it to your other customers as well, as you should. So from my perspective, it's huge. It's huge. When we talk about days and minutes, I mean, the order of magnitude is hardly describable in terms of the impact that we need in order for us to deliver in a very tight time frame. And then, by the way, it's incredible, from my own experience, working with our strategic partners, how sometimes when you challenge the status quo in terms of, hey, why are we doing this this way? It seems to be, in many cases, or some cases, accepted. Like, okay, it takes us X amount of days to do this. But no one says, okay, wait a minute, let's challenge ourselves. How do we improve? How do we speed up? And it's just sometimes a question. It's a matter of just asking the question. And so this is where Google really shines. The team in Google, very talented and have a lot of great ideas. The team in Ampere, equally talented and have great ideas. And collectively, they're pulling their brains together to say, from an automotive perspective, and from a Google perspective, how do we join forces to bring in a continuous improvement into the process of how to make things more agile, more throughput, more velocity, in order to deliver on a milestone, as is this one. So it's been fantastic. So now what I propose is really to see what it means is, so we will jump to a small demo to try to explain you and to visualize a little bit more what it means. So I will just increase the size here. So here you have the workstation environment of the developer. When he connects to it, he can launch his workstation every morning when he need to start working. The workstation will automatically shut down at the end of the day when he will not use it anymore. So when he connects to this workstation, he uses a web browser and he is able to access his VS Code environment. So the IDE he is using, and as you can see, the code is already there, so no need to sync it. And he can start working instantaneously. So here he will try to add new features, to add some indicator when there is some overspeed, for example, and he want to capture the speed and create an indicator that will appear on the dashboard of the car. So for this, he only uses a command, and this command will automatically kick a code generation underneath, using Gemini Code Assist, to propose some code. He also interacts with AI systems to ask for some explanation of the code, just to validate if it matched what was expected from him. And the next step, usually, for the developer is to generate tests, because there is a new feature, so there is something new to test and to validate just afterwards. So the test is now integrated inside the code, and we can go to the next steps quite easily. The next step is, once we have this code, is to kickstart a build. As we said, now, before the build was taking one hour and a half to two hours, depending on the machine. Here it takes only three minutes, so I will not... wait for over three minutes, and we'll go directly to the end of the build. The video is real-time, so we did not cut it. So you can see here, at the end of the build, the time it takes. Yeah. It's quite small, but it's around three minutes. As I said, now we have a new feature. The developer is happy. It's working on his laptop, almost. At least the code is there. You want to validate these new features. So to validate this, it does not have to leave this environment. It just has to launch the emulator, Cuttlefish, for Android, and it will automatically use the new code that was generated, a new image, and use this new image to be able to connect to this environment. So you can see here the environment. So it's a window where you have all the Cuttlefish instance, in this case, two. And this Cuttlefish instance, you can see here the speed displayed directly inside this environment. You also have some tooling to be able to interact with the speed and change the speed directly to be able to see the modification. No. So as I said here, there is both an environment to help the developer to develop, but also some AI system. So Gemini could assist in this case. That will really help the developer to stay focused in this development environment. No need to open a new browser, to go to another website. But also, these suggestions are not standard suggestions. They are adapt to reno environment because behind the scene, there is some RAC capability, retrieval augmented generation, to ensure that the AI has the knowledge of all the reno code and all the Android code are dedicated to this project. So the suggestions are adapted, tailored to this environment. So I want to point out something here as well. Remember, when we circled back to the beginning, I said we'd created something called an Android platform productivity solution. So part of that is reducing time but making people more efficient, which is where AI assistance within the cloud workstation comes into play, which is what you just spoke to. So again, because this is all about the customer, I'm going to ask Henry, how did reports of this coming up to you, your developers have AI assistance within this development environment, they have RAC, how did that impact your view of how the partnership was going? I mean, it's been a game changer for us. The teams have been deploying, not just testing, deploying these AI assist capabilities in, like I said, code generation, test case generation, validation. We're using it in many, many different aspects of the vCycle and the continuous improvement and development that we're doing. And so it's widely deployed. It's been a game changer for us. And we are doing things that usually take days in a matter of just hours. And to me, it's all about scale and speed, ultimately. And this is the name of the game. The only way to really deliver on time and be optimized in what we're doing, fully leveraging the reach of our global team and deploying these things, not just locally, but also internationally, globally, has been a game changer for us. It's helped us to stay on track. And we continue to push the envelope, so we're not going to just stop here. We're looking into how we go further with AI assist to look into requirements, to look into the way we're doing business every day to see how it can help us be more efficient and more agile. And so game changer, as far as I'm concerned. It's real. It's not hype. It's real. We realize the value every day. And it's keeping us still on track. So for me, it's been phenomenal, this dimension of the core assist. Come on. Great. So back to you, Jim. Yeah. Yeah. Just have an issue. Yeah. Yeah. So we have seen the developer experience, but now the developer has developed new features. And this new feature, we want to be able to test it the fastest way possible. Before, people have to create prototype, hardware prototype, wait for six months to this prototype to be printed, to be sent, connected together inside the test bed, and be able to test the feature. Now, what Renault is doing is be able to create on the fly new environment with these new features that will integrate every component of the car. So the idea is really to create what we call a virtual twin of the car. So this is done using Cloud Workstation, but also some compute infrastructure behind. This is totally automated. So one project manager that asks for the feature that the developer has just developed, he can ask to have an environment to visualize this feature and to validate it in a few hours. So let's see a demo also of this environment and what it means. So we also start from the workstation. And from this workstation, we do not connect this time to a developer environment, but really to this interface with the car. So you can see here both screen because there is two screens in the car, one with the display of the speed, the line, and so on. And one more for the infotainment. What we are doing here is also start a tool to be able to generate the connectivity between the laptop and the workstation and generate a 3D environment to put the car in a real environment here. And the car uses the autopilot mode and is able to drive into the virtual city. And at the same time, we have the feedback, the real feedback of what appears on the screen of the car. So this means that we integrate all the sensors to report the speed up to the dashboard. You can see the wheel is going left when the car is going left, and so on. So really a real immersive experience for the end user, which could be a tester or the product owner which asks the feature. So, Femi, before you ask me my opinion, I'm going to give you my opinion. So this one also is very important to note. As you know, in the auto industry, one of the biggest challenges we have is physical properties, right? Especially in the development phase. Especially, again, when we talk about our global team. So shipping mules or prototypes, physical benches. You're limited by this in many cases. And so imagine what this does for you. It gives you democracy, right? For the entire team to access at any given moment, virtually a digital twin or a virtual twin of what you need tested, developed, verified at the feature level, at the system level, at the vehicle level. And this is a tremendous asset for us from a time again, from a cost, from being able to really, truly work with the same tools across the entire globe and not having to worry about shipping benches and all that. So you still need that, of course. But this has really accelerated our development also so much. That has been a great help for our engineers across the globe because I can spin this up anywhere. I have access to the network and the security and the access. So I just want to mention that. So before you ask me, I was about to ask you something else. Okay, go ahead. So I hope this has been worth your while. You've heard about their goal. You've heard about the solution. We worked collaboratively on to help achieve their goal. We'll put some numbers up now. And then I would love for Henry to tell us, we've come this far. What's next? Where do we go from here? So, because you have to see this and look at it and see how could this apply to you in your organization and in your circumstance, the collaboration between Renault and Google Cloud. So Henry, with the numbers as a backdrop, what's next? Where do we go from here? No, absolutely. So to me, like as I mentioned earlier, these best practices must be capitalized. And we need to continue to push the envelope because I think we could do more. We have the right mindset between the Ampere team and the Google team and the engineers together collectively. It is a true, true symbiosis. It's unbelievable how well they're working together. So we're thankful for that. And from my perspective, we're already thinking about the next generation of our current platform. And so, believe it or not, so even the vehicle is not launched yet. So this is how well ahead we're starting to think. So my expectation is that I'm a big believer in virtualization. I'm a big believer in AI as a tool in order for us to keep pushing the envelope to deliver faster and more productively and more efficiently. And so we can continue to work with the Google team on this. My expectation is a lot of the things we discussed today become kind of the standard. And we keep pushing the envelope further to see new ways in which we can make democracy for the developer regardless of location, regardless of time zone, to be able to continue the work without being limited by the day or the night or the physical properties of the thing. So this is really very important. And as we are learning from each other as well, I think this is, I call it a book of knowledge that we should really share with the industry as well so others can take benefit. And if there's any way we can create sort of a consortium or gathering around what we're doing here, I think also additional fresh mindsets can enter into the equation and help us. So we're open for that. And so from my perspective, I'm excited about the future of Ampere and Google together. We're going to celebrate our first launch in April and open that bottle of champagne and share it with the team. And from there, like I said, the work is ahead of us to continue to pitch the envelope on the next generation of way of working as well as platforms that we are developing together. So with that, thank you very much. I really appreciate the partnership. It's one of the templates of how a partner should be. And it's been a great pleasure to really work with Google from an Ampere side on what we're doing together today and what we'll do together in the future. So thank you. Well, audience, we're supremely grateful you graced us with your presence. We told you to come here to hear about how Google Cloud, Google Cloud SDV, Gemini Code Assist, and our Android platform development productivity solution combine together to help supercharge Android development for Renault, which helped put them closer to a Google software-defined vehicle launch next year. We hope this has lived up to its billing. I thank you for being patient with us while we interacted with each other. So as I promised, once we're done, we will now open it up to you so you can ask us questions as to how this applies to you or any question you want to ask here. I apologize. I left only a minute for it. So if there are any quick questions, we'll have to answer. Yes, sir. Thank you. Hi. Can you hear me? Yes. Yes, my name is Mike Robichaud. I'm with ThoughtWorks, a consultancy working as a Google partner. My question is, what are your thoughts about next steps in continuous homologation? I mean, there's obviously the issue of real-time testing and trying to shift everything going left. Very impressed, again, with your work on virtualization, but we'd like to work with thought leaders who are taking that next level to continuous homologation and continuous compliance testing. Does that make sense? It makes total sense. And for us, at least on the European level, homologation is a big topic. Obviously, also, potentially, we may have ambition to go beyond Europe, but certainly, we are open to that. So happy to touch base with you and to see what we can discuss. So let's do it. We have 15 seconds. Developers! Developers! Thank you. Thank you.