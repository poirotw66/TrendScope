 MEGAN RADDY FONSECA Hey, everyone. My name is Megan Roddy Fonseca. I am a senior detection engineer at Datadog. And I'm excited to be a part of Google Cloud Next, speaking about default service account abuse. It is a major threat vector, as I'll discuss, in Google Cloud. But there's simple ways to prevent that threat vector and protect your organization. So when it comes to service accounts in Google Cloud, they are a feature that is actually a great security method. So I'm going to talk about abuse, but we do want to use service accounts. Service accounts allow resources to interact with each other without the need to store long-term credentials on a system. And they provide the ability to fine-tune permissions that are needed by these resources. So just to set the scene with an example of why resources need to interact, let's imagine a web server. And on this web server, you're hosting a website. And that website has your logo and other static images. Well, it's great to have a storage bucket from which these resources can be dynamically loaded. But in order for the web server to do that, there needs to be a permission to allow the web server to interact with that storage bucket. So service accounts can be put on that web server and provided access to read from the bucket in order to load those assets. Or maybe it's an app server. And the app server needs access to an SQL database that stores user information, contact details, and other metadata. Again, that app server needs to be able to read and write to this SQL database. So to do that, we can apply a service account with those permissions. Now, the problem comes in with what if those service accounts are over-permissioned? One example of this is the default service account. Now, it's great to have that default service account as a user, as a developer, as an engineer. As a developer, an engineer, we want to go into the platform, deploy a virtual machine, spin it up, and have it do what we need. So that default service account, it allows us to do that. We don't have to create a service account and fine tune permissions. However, historically, those service accounts have been granted editor permissions at the project level. Now, we have access scopes to tune those permissions at a VM level. But even with that, a risk is still present. So Google is preventing this now. They've added a constraint that is enabled by default ever since organizations were created in mid last summer, kind of, May of last year. So if your organization was created May of last year, this threat is already mitigated in many ways. But if your organization existed before May, you may have these default service accounts around, and they may be over-permissioned. So with a default service account on the system, as I said, at the project level as an editor grant, at the VM level, it will be scoped down based on the access scope. The default access scope does restrict what the tokens that are available on the machine. Again, they're short-lived. So a threat actor compromises a machine, they can get a token, and it will have the permissions of the access scope. So that access scope, if it's the default one, only really allows a few permissions, but one of those is reading from buckets. And since the role, the service account has the role at the project level, any bucket within that project can be accessed. So if you have buckets storing sensitive data that maybe the web server isn't actually needing to read from, it has a separate bucket, the threat actor may still be able to access those other buckets and get maybe credentials stored in there or sensitive data like customer records. If that's the case, the threat actor can do a lot with just that default service count on the endpoint. Once they compromise the host via, let's say, exploit on a public-facing application. Now, again, engineers want it easy. They want their infrastructure to work. Maybe it's just test infrastructure, and they're not even that worried about security, but they're not necessarily aware that with the public-facing nature of what they're doing, there's still inherently a risk. So they enable full API access. Now that access token that's granted could allow them to create virtual machines, create API keys for service account, delete infrastructure. So you can see this is a massive risk. So with those default service accounts that are now more restricted, we kind of want to start to move away from those. We can still use service accounts that aren't the default ones provided by compute, and that allows us a lot more control over the permissions. So there's three ways I want to discuss that we can prevent these default service accounts being abused if, for some reason, those short-term tokens are accessed by an attacker. Number one is that we want to use the IAM permissions. We want to fine-tune them and use least privilege. So with the role that's applied to the service account, rather than using this broad editor role at the project level, we want to start fine-tuning and saying, okay, what permissions are needed? So going back to our example of a web server that needs accesses to resources in a bucket, that web server, the service account applied to it, only needs a read permission from the bucket, and we can narrow the scope to a bucket that it needs. So these accounts can no longer access all data in all buckets. Or in the example of our application server, we only need to apply read and write access to a specific database in Cloud SQL. Read this if the token is compromised, while actions can still be taken, at least the scope is reduced outside of all resources within a project. So that's number one. Number two is the concept of single-use service accounts, single-purpose service accounts. So what I mean by that is, again, with our example of a web server and an app server, one option would be to create a service account that's applied to both of them and has the permissions for the bucket reads on the relevant buckets and the read-write on the relevant database. But instead, there's still more risks there. Because if the web server's compromised, you've now, by proxy, had a compromise on the app server. So instead, we should have a web server service account that has those bucket permissions and an app server service account that has those database permissions. This greatly reduces the risk, again, by least privilege. It's more management overhead to have multiple service accounts, but in the end, it's worth it. So that's number two. Number three, Google Cloud provides an offering specifically for Kubernetes engine, which runs on compute infrastructure, called Workload Identity Federation. And with this service, there's a lot more management of the credentials and authentication put on the Google Cloud side. So instead of those short-term tokens being available at the compute level, the Workload Identity Federation handles the authentication. This means that if that Kubernetes instance is compromised, any access tokens that are retrieved have no permissions by default, and so they can't be abused by the threat actor. So these are three ways in which you can significantly reduce the threat of default service accounts. The Threat Horizons report by Google has consistently shown targeting of default service accounts and editor roles within Google projects. So I hope you can take away these three actionable items. You can look in your environment and identify default service accounts that maybe you didn't even know were out there with editor permissions. I'd love for you guys to check out Datadog's blog. We have a blog specifically focused on this walking through a real life attack. And I'm happy for you guys to reach out to me on LinkedIn if you have any questions about what you've heard today. Thank you. Thank you. Thank you.