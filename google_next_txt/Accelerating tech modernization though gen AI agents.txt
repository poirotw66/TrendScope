 Thank you for joining this session. Just a quick intro. My name is Raj Bechter. I'm a senior partner here at McKinsey. I lead a lot of our tech work, particularly within the wealth, asset management, and insurance space. Been in the industry for about 25 years, doing more of the same, and we're pleased to be here with you guys today and talk about AI and modernization using AI. But before we do that, Dante? Yeah. Hey, everybody. Dante Gabrielli. I am a principal product manager out of Quantum Black. That is our AI practice at McKinsey. So I work within our labs division, focus on building technology and capabilities that we bring to clients to help accelerate tech modernization and also adoption of cloud. Super excited to be here and chat with you about AI agents. Fabulous. So let's get into it. There's five things we hope you take away from this particular session. First is we have observed in our client work 35 to 45% reduction in cost and risk when you use AI, Gentic AI, for modernization. This is a massive deal for all the folks in the audience. You have your companies. You've been through these sessions as well as opportunities to modernize capabilities in your own institution. You know it's costly. We have observed 35 to 45% reduction in both cost and risk. I hope you take that message away. So the question is, well, how? How does that happen? A couple of things. One, we know tech is real. You guys are all here. You're at this conference. You know the tech is real. You've been to all the different breakout situations and rooms. You know the tech is real. But it's not just tech. There's also this massive human element associated with it. The humans that are building these agents. How we scope these agents. All of that is coming from the human. If we don't get that right, these agents don't perform the way we want them to form. So point two. Point three is you can have the agents. You can have the humans who are building them. But if you don't have a structured approach to actually scaling this, it becomes pilot purgatory. Right? You can't scale it in an institution. So that's point four. The last point I want to make is so you've got the tech. You've got the humans that are building it. You've got the structured approach. And the last element is change management. People that are going to use these things or the outputs of these agents. All of those things have to be in place in order to scale this capability. These are the lessons we've learned over the last 18 to 24 months looking at agentic AI. Right? So we hope you take these four or five messages away from this particular talk. Just very quickly. Why now? What's happening? And again, you guys are in the ebb and flow. You're at this conference. You see it. Our ability, the advances in reasoning have actually propelled us in this direction where we can now have automated agents doing a lot of these different things, but they're overseen by humans. Right? The value realization equation to this is actually quite compelling. Right? What used to take us seven, ten years to modernize a particular system, mainframe, platform, pick whatever you want to pick. Seven to ten years, we can now realize in months. And we start to realize value in months. And we'll show you a little bit of equation at the end in terms of how we think about the business case and why that's so important as you go in this particular direction from a modernization standpoint. All right. Awesome. Awesome. Let's get into tech now, though. Who's excited about tech here? Oh, yeah. I sense the excitement. Very cool. So I want to take you to a few things, right? So first is what we've learned technically about doing this over the course of the past couple of years, right? We all know that Gen AI, Agentec AI is accelerating at a pace and innovating extremely fast. What have we learned in real-world applications where, you know, we're solving real problems for clients? And then what we want to do is go through a demonstration, right? Let's see this live and in action. So let's start here. The key thing, and Raj talked about this, is about scale. And the key thing about scale is not running around and simply throwing code or throwing business processes into a chat interface. And that being the accelerant that's going to get your organization to a point where they're able to make step function change that's going to make the business successful long-term. And what you see on this screen right here is much of the learnings that we've talked about. Now, what's interesting here, and Raj talked about this as well, is that we don't see Gen AI as a silver bullet. We see this as the next iteration, the next evolution of how automation is fundamentally changing the way in which we operate and organize our businesses, okay? So what you should see here is that we have started to implement these capabilities at clients, but we've done it in such a way that we've taken a microservices approach, right? You can see the various services that we've put in here. We've introduced things we've learned around conversation, right? So you see the conversation service over here on the right. This is a key thing, and you'll see this when we do the demonstration. It's really important that we don't let the agents just go on and do their own thing, but that they're able to come back and ask us questions, okay? That they're able to work with subject matter experts, and we're getting the most out of our subject matter experts, and not simply sitting there idly while we let agents do their work. We liken it when we talk about this inside of our teams to children, right? So do a lot of you have children out here? Maybe. I see a couple hands. So what's interesting here is when you think about agents, right? We think about them. They bring a lot of human-like personalities to it. Not that we're saying agents are humans, but that's what's been intriguing to people. So I liken it to my son. My son's name's John, right? When I tell him to go and clean his room, and you've probably done this. He's 17. What he does is he folds up a couple shirts, moves it over to the right, and then starts doing something completely different. I come back. I'm like, John, what's going on here? You didn't do what I asked you to do. And we iterate on the process, right? John, move the shoes and get them back over to where they need to go. This is very similar to what we've learned with agents. They're able to come back and quickly get us information, but using the subject matter experts to be able to refine the approach and make sure that they're moving in the direction that you expect is key to making this very successful long-term. So how do we simplify this? How do we build out a taxonomy or an ontology that really breaks down what are the components that drive agentic orchestration at scale? And what you're seeing here is similar terminology to what you'd see within the tech space, things like tools and agents. But then how do you start to organize these agents in such a way that they work together, right? In the same way that we work today, where we would pull in a group of experts, give them an objective, a problem to solve. It's the same way we want to think about agents. I was chatting with some clients and some different folks within our organization, and I think what we all loved about cloud was the fact that it gave us access to compute in an ephemeral and an elastic way, right? What was awesome was the fact that as a development team, I could quickly spin up infrastructure, not worry about the historical slow IT service management processes, spin it up, get some compute, spin it down when I'm done, and I've only paid for the time that I've actually used that compute power. Agents, we've been talking about it. It's very similar to like ephemeral and very low-cost workforce management. How do I go out and spin up a set of experts very quickly, have them execute on an objective, get it to me way faster than any human would, and then have the ability to actually iterate with them and only pay for it during the time that I've actually used them? It's a great shift in thinking, and it allows us to think about how we scale workforces very elastically without the overhead of traditional HR processes, and that's what you're again seeing here. And then we think about flows. How do teams work together, right? If I have, and you'll see in the demonstration, a set of agents that are responsible for understanding the business logic that exists within COBOL and a mainframe, how do I then pass that information over to another team that's starting to think about what is the future state design of the business process and turn that into a codification within a modern stack that then enables the business long-term, right? And this is what Raj was talking about. It's very key that the business process is the main driver, not the technology. Technology is an enabler, and historically, technology, the business process has been shoehorned to meet the needs of the technology. What you're going to see today and what you're going to hear us talk about is how the business process, how the change management, how the goals of an organization are the key to transforming businesses, and the technology is an enabler that's going to support that long-term. So what does that look like practically, right? So what you're going to see here, and I'll show you this, and then we'll hop into the demo, is it's very natural language, right? I want to be able to describe what I want a set of agents to do without having to think about the syntactical requirements of traditional programming languages, right? I want to do this quick. And the key to that is this, is if I can make it very human-like, and I can do it in such a way to where it's natural language, I can start to expand the use cases to users that may not have the technical depth as engineering teams. And again, that's what we're seeing within businesses. We've deployed this with business analysts and folks like that that are actually using this to synthesize conversations with various users and stakeholders to within minutes fully understanding and synthesizing what's happening and what the goals are across the organization. The step function change and acceleration is real, as Raj said, and we're very excited about it. Then how do I define my experts, right? Again, we talk about this workforce management approach. In the same way that I would create a rec today to go and hire someone, why would I not have that same approach in actually defining the sets of agents and team members that I would pull together so that they can work, right? And that's what you see over here on the right-hand side, right? In this case, we have a planner agent. Think of this as the person responsible or the agent responsible for organizing the group, ensuring that they're passing the objective along. And they understand the skills and capabilities of each of the agents so that they are able to fundamentally work in a way that's most effective. So what I'm going to do now is I want to walk through a demo for you. So let me set the stage for the demo. One, it's recorded. That's on purpose for anybody who's done live demonstrations. They can go crazy. Plus, agents are conversing here. So as fun as it would be probably to do that, we would use up all of our time to just watching these agents talk. So the scenario we're going to talk about here is a payment processing system that's running on a mainframe. And in this case, the organization is getting a lot of feedback from their customers within a call center, right? And it's not great feedback. And they're coming to us going, okay, look, we know our customers are upset. We know they're frustrated. But we really don't know where to start. And the key thing is we don't want to modernize the entire mainframe in order to achieve greater customer satisfaction. How do we build something that's going to solve the problem but doesn't require us to stay on the mainframe? So we're going to walk through three stages, okay? First, we're going to work through the current state, what we call a reverse engineering phase. That is to understand the business process, the problem we should target, and what the actual technical architecture and software architecture is of the mainframe. After we understand that, what we want to do is work with the business leaders, the product managers as well, and say, let's reimagine the business process. What would this business process look like if the technology weren't an inhibitor, okay? And then lastly, what we want to do is say, okay, can we commission a team of agents to accelerate the buildout of the code that will implement this new capability that's going to solve this problem? All right? Now, this will move fast. Shouldn't have to pause it, but if I do, I will here, okay? So what you're seeing here is the training document for all the call center agents. What we're doing is commissioning a set of agents that are going to go in and actually read the document and put it in a flow diagram for us so that we can quickly understand. You're seeing that there's two agent teams here. The blue dots represent agents we've defined. The silver dots represent tools that we've given them beyond LLM access. You see the conversation happening over here on the left, and this is a key thing. We want people to be able to quickly understand how the agents made their decisions and how they came to the conclusions and outputs that they were there. You see up in the top right all the artifacts that the agents are creating. So what we're doing now is we're scrolling through the conversation. Again, time-lapse here, so this takes about three or five minutes if you did it in real time. And the agents have worked together. We have critics within there that are analyzing what was done, and we're going to pull up the document. You've got the flow process, which shows the customer, the call center, and the actual payment solution. The key thing, and you might have missed it, is that the customer always has to call the call center to get their balance. And this is going to be key as we go through the actual logs to determine what problem to focus on. So we've commissioned a whole new set of agents. Here we're saying, look, we've got a bunch of call center logs which are representative of all the calls that have come in, the customer satisfaction score, resolution time, things like that. What we've asked these agents to do is to analyze that document and surface for us what's the key area that we need to focus on. What's the problem that if we can solve, we can get that customer satisfaction score up higher. And again, what you're seeing here is the agents conversing. They're working through the document. We've got a Python coder in there, you know, writing the code to analyze the document. We've got a data mapper trying to understand what are the types of calls. And what you see here is we get a nice markdown document that says, hey, billing payments is a key problem. Now go back to the business process. The actual problem was customers always have to call the call center to get their payment information, which then results in late payments. So what we need to do is give users access to the technology. But before we do that, let's understand what the software architecture is today. So here's some awesome COBOL, right? All of us are excited about that. So we give the agents some access to the COBOL. And we say, what we want you to do is give us a high-level software architecture that defines the databases, the batch processing, the front end, so the BMS screens, and who is accessing these systems. So again, we have another agent team. This goes back to what we were talking about before. How can I quickly spin up experts rather than pulling from my human labor force and have them work on these problems in an iterative fashion as fast as possible? So you'll see here that, again, we land on the same session screen. They're conversing. And up in the top right, we're starting to get additional information. So the agents were able to work through it. Here are the UI components. Here's the database. Here's the batch processing. So on and so forth. So we've got three things. Business process, software architecture, and the problem. Now what we've done is we've had conversations and interviewed business stakeholders. What should this process look like going forward? And we've recorded that. So rather than traditional, like, let's create some user stories, let's build this requirements document, why don't we just use agents to actually transcribe the audio and then use that as a way to start to refine what this process should look like? And again, we're not talking what should the tech be at this point. We're simply talking what should the process be because that's the key driver. So the agents are working through this. Now what will be interesting here is you see on the bottom right, a question just popped up. This is super important. The agents took their first stab at listening to what was said, and they build out a diagram. And we're like, close but not right. So this is where our experts come in. What we want you to do is remove this vendor column that you have, and we want you to use a particular set of logic to determine when the actual notification should go out to the customer. So as a human, you see us typing that in here. We're providing feedback to the agents. They are taking that feedback and reconvening to actually introduce the updated information into what the business process should be. So they continue to converse here. And we'll give it a second. They're talking some more. Imagine if I made you guys watch this in real time for 15 minutes. I'm sure that would be a lot of fun. So you see that they've made the changes. But we've got one more here. We're saying, hey, you've left the user out. You left the customer out. Can you go ahead and actually update and make sure that there's a swim lane that shows that the user should be involved? So you see, in this case, our product manager typing it in. They do that. The agents take the new information. And what they're going to do here now is create what will be the final business process. Okay? So we've got a new link here. Got some plant UML. Boom. There you go. So what are we going to do lastly? We want to design a new software architecture. Now, this is key. What we're telling the agents is, look, we want something cloud native. We want that to be integrated into the mainframe because the last thing I want is to spend, you know, two years updating the mainframe to solve the notification issue that's creating a horrible customer satisfaction score. So we ask them to come up with this. We've obviously told them to use Google Cloud. And you'll see that here in a moment. But over here on the right, and we'll pull that up again, what you'll see is that there's a new notification service that sits external to the mainframe. And it's going to integrate with the mainframe to solve this problem. So we get to customer value to client value faster. So now lastly, we're going to take this last agent team. What we're going to say is, like, look, we want this running in Google workflows. And we also want this written in JavaScript for the back end. So we commission a new set of agents with those capabilities. And now what they're doing is taking the business process. They're taking the new software architecture. And they're going to work together to build out the YAML file. That's going to be what we put in there for the Google workflow. And we're also building the JavaScript that is the actual business logic that's going to execute on the notification system and the other things as well, the balance checking and those types of things. So what you're going to see here now is we're going to take the YAML file and hop into the IDE. You'll see the configuration here. And we're going to open up the Google Cloud console. Right? We're going to drop that in here. And over here on the right, what you're going to see is the entire process now in cloud-native form. So, again, fast-track through the entire process. And there are iterations that would occur even further as you're working with your clients. But, again, the key is the business process and having the technology support that in the future and make sure that the business can evolve. Raj, turn it back to you, man. That was pretty powerful what you guys just saw, right? Prior to this, it was all humans doing all of that work. Engineers doing all of that work. Right? Tomorrow, and this is where the 35% to 45% comes into play, is you've got your tech workforce building these agents, nudging and training these agents, and supervising these agents. So imagine how that changes from a tech perspective as a tech management function. Right? I think Jensen Wong said this best when he said, look, the nature of the tech function is going to change as a result of some of this technology. We're going to be supervising and training these agents and building these agents as opposed to doing the work that you saw the agents do just now. Right? That's the crux of this 35%, 45% reduction in cost and risk. Right? We put risk in there on purpose. Right? Because, again, we all know the more humans you embed in this stuff, the more risky it gets. Right? So if you can take that risk or at least reduce it, it's tremendously valuable for any institution. So this slide here just kind of articulates a business case at a very, very macro level. Right? There's tremendous amount of modeling, spreadsheets that go behind this. But if you just look at it simply from a sort of a cost per line of code standpoint, if you have a humans in the traditional way that we do modernization, $6 a line of code. If you embed agents, it's about $3.75. And this is from our own observation as well as independent external research around the $3.75. Right? And that's a 38% reduction. That's point one. Right? That's the cost. Then you look at the time to modernize. What you just saw these agents do, again, imagine a human being doing that. That's probably months, if not years worth of work to go through that. Right? To document what's in our legacy platform, to reshape it, and then actually implement it. Years worth of work. We believe and we've seen, we've observed, we can take as an example, and the numbers under the time are years, 10 years to modernize, let's say, a set of platforms in an institution, down to roughly five. It can be done. It's being done. Right? Right? Right? Right? And then the last point is just around the run costs, savings from a sort of a mainframe to cloud. Right? Let's not even factor that in. And by the way, there's so many other benefits that we're not even contemplating in this business case. Right? In terms of just streamlining organizations. Right? Skill sets that people would have. Right? There's benefits that you would accrue out of those things as well. Right? We're just taking a very simple view of the business case. So, we think it's pretty powerful. Let's maybe talk about some of the pitfalls and maybe give you guys some lessons learned around what we've seen in our travels. I think on the left side, despite what you just saw, AI, Gen AI is not a silver bullet. Right? Like, I'll give you a small story. One of my clients, insurance carrier, they said, hey, can you just give us the tech? Right? And we'll do it. We said, okay, why don't you just try it? You could do a pilot. They want to do a pilot claims function of this carrier. They're still trying to figure out the business case with the claims function itself. Haven't launched the pilot. Still just working through the people issue that we typically see to understand the business case and convince the business that this is the right thing to do. Right? So, I reiterate, it's not just about tech. The tools are there. The tech is there. It's wonderful. It'll get us to the promised land. But it's not a silver bullet. Right? We still have humans involved in these organizations. You have to convince people that this is the right thing to do and the business case will hold up. Right? That's point one. Point two is aligning on the business outcomes. We are totally against modernizing things for modernizing sake. It doesn't lead us to any business outcome. Right? So, we have to ensure. So, again, I'll give you a small story. And the claims function, we are trying to modernize claims. Right? How property and casualty claims are handled by these carriers. Right? We all see what happened in L.A. from the FIRE perspective. We want to give people those claims quickly. But today, it takes months. There's no reason why it can't take days if we fix the claims function. That's an outcome that we want to go for. Right? So, we want to modernize the platforms to allow us to get that functionality to drive that outcome. Right? And that's the business case. The third piece is overlooking change management. So, you know how I mentioned, you know, humans who are building these things. But then the last part of the equation is change management. People that are going to use this stuff. Right? And I'll give you a small story. By the way, I'm in FIG. So, all my story is around banking and asset management insurance. So, this one is an asset management story. So, if you're a portfolio manager, you're managing gobs of money. Right? Billions and billions of money. Right? And you're selecting where to invest. Right? So, here, you know, the tech department or even the business comes and says, hey, we're going to automate that selection for you. Right? AI is going to tell you where to invest your money. And what kind of allocation I'm going to have in my portfolio. Right? I mean, immediately organ rejection. Immediately. Right? Because if you're a portfolio manager, this is all you've done your entire life. Right? You're not going to be replaced by an AI or a bot or an agent. Right? Right? So, that whole change management, helping that portfolio manager understand where the value is in using this and the output that's coming out of these agents. How best to put that as part of their investment process as an example. And how best to use it is tons of work. Right? So, again, reiterate, the change management aspect of it is critical. Right? And it's what we call front to back rewiring an institution or a company to actually use this stuff in a meaningful way. Right? That's on the left side of the page. Right side of the page. What are some success factors? One is you've got to have the leadership and stakeholders bought into this. Right? Again, this is a game changer. But you've got to bring the organization along. Not just the people that are going to use the output, but also people that are part of the institution as a whole. Right? You've got to bring them along. Make sure they're aligned. Make sure they're motivated. Make sure they understand the business case. Point one. Point two, the way to start, and we've seen people go haywire on this thing, they'll just pick a use case. That's great. But then you look back a year later, it's like, okay, what did that use case deliver? Maybe it proved the technical capability of it, which is wonderful, helpful. Absolutely, we need to do that. But it didn't drive to an outcome, to a business outcome. So the business is left wondering, well, where's my benefit? Right? I've written this check. The tech folks got to do tech. It's wonderful, but what's the benefit? Right? So again, targeting a specific outcome is actually pretty critical in making this stuff come to life. And we do have a perspective on that. Right? Use cases sometimes are too small. Transforming an entire business might be too big. But transforming a domain might just be right, as an example. So that's point two. Point three, again, you're modernizing for organizational agility. Right? We all know changing something or a feature or a variable in a particular system, especially a legacy system, takes years. Right? It slows us down from a business perspective, from a market perspective. Right? And things are moving at the speed of light. Right? And we can just see that over the last few days in terms of what the markets have done and tariffs and all of that. Right? We've got to be able to adjust to the speed of the market. And we need our tech to be able to adjust as well. Okay. Thank you. We appreciate it. Dante and I will be on the side. If everybody wants to chat, more than happy to chat. But I appreciate the time. Thank you.