 Hello, today we are going to talk about navigating a web app with AI enabled browser agent. Now, what is a web agent? Web agent are basically AI agents that we use to navigate and interact with websites on our behalf. Web agents can take form with a fairly simple setup. The general form of a web agent flows from providing the agent with a task, having the agent define which actions it needs to take, and finally having the agent perform those actions. Why use a web agent? There are many uses for that, but in our specific case, we are addressing a critical challenge for us, which is to ensure that our documentation and user flows for Google Cloud products actually work. If an agent can understand documentation and given user flows and can perform any given tasks on its own, it gives us the opportunity to scale significantly, especially across thousands of documents in different environments and languages. As agents perform specific tasks in a domain, like navigating through a company's ticketing system, the run history can be saved and applied to fine-tune the model with domain action data set to make that agent better at performing that type of task. So how do you build a web agent system? There are four key components here. One, the underlying model. This is the model that is used to predict browser actions. Two, the agent environment. This is where your agent actually runs. It could be on your local machine or on the cloud. Three, the actuation engine. This translates agent actions into actual actions in the browser. We recommend using a browser automation library to do this, like WebDriver. And finally, four, the browser, where you want your agent to work in. Our web agent is implemented as a loop. We first provide our task and context to our model. From there, we use Gemini to predict which action to take on the page. We use a browser automation library to actually go in and interact with the console page. Once that's complete, we critique the action by prompting Gemini to determine if we have made progress on that step. We then either move on to the next step or continue attempting to complete the current step. Benchmarking is essential for developing effective web agents. Because it allows us to do things like do performance evaluation, compare different models and see how they behave for that specific web agent. And even to improve that web agent by doing optimization. Key areas for benchmarking include task completion, information retrieval, user interaction and navigation. When we benchmarking web agents, it's important to look at some key metrics. So, in terms of quantitative metrics, we use things like test success rate, time to completion and number of steps. And in terms of qualitative metrics, we can use things like user satisfaction, clarity of output and explainability. Benchmarking doesn't come without challenges. We have to worry about things like reproducibility, generalizability, robustness and even defining what is success for a web agent. Shallow validation is a subset of the overall framework that navigates through a set of links and uses Gemini to detect a set of problems. Thanks to the flexibility of Gemini, it was relatively easy to adapt the agent to find all the problems. Including unexpected chunks of English in translated versions of the console, errors in topics rendered in dark mode or mismatches in deprecation statements between documentation topics and the console UI. Now catch a glimpse of our agent in action. Here, our agent is given the instruction from the Cloud Run Quick Start Guide. It goes through each step, one by one. For each step, it annotates interactable elements in the Cloud Console page. We then use Gemini to predict the best action to take. We perform the action using a browser automation library and wait for that to complete. After that, we use a critique phase in our agent to determine if we are complete with the current step and can move on to the next. You'll see our agent is able to successfully create a Cloud Run service from the natural language steps we provide. We can't wait to see future applications of web agents. Thank you. Prompt Davide Here we go. For more information, we can get to see future applications of the Top F وب. The Smart Professional at the termか. There will be a lot more properties that can visualize the 2.0 weather A site at the below bar to Wifi there is what it sounds like. It is very vigorous the community. We canfeit too many years! It is only one step in front. After that, it is T Clap is the top Aviation model.